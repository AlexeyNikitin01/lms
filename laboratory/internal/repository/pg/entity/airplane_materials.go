// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AirplaneMaterial is an object representing the database table.
type AirplaneMaterial struct {
	ID              int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	AirplaneModelID null.Int    `boil:"airplane_model_id" json:"airplane_model_id,omitempty" toml:"airplane_model_id" yaml:"airplane_model_id,omitempty"`
	Name            string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description     null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Color           null.String `boil:"color" json:"color,omitempty" toml:"color" yaml:"color,omitempty"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *airplaneMaterialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L airplaneMaterialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AirplaneMaterialColumns = struct {
	ID              string
	AirplaneModelID string
	Name            string
	Description     string
	Color           string
	CreatedAt       string
}{
	ID:              "id",
	AirplaneModelID: "airplane_model_id",
	Name:            "name",
	Description:     "description",
	Color:           "color",
	CreatedAt:       "created_at",
}

var AirplaneMaterialTableColumns = struct {
	ID              string
	AirplaneModelID string
	Name            string
	Description     string
	Color           string
	CreatedAt       string
}{
	ID:              "airplane_materials.id",
	AirplaneModelID: "airplane_materials.airplane_model_id",
	Name:            "airplane_materials.name",
	Description:     "airplane_materials.description",
	Color:           "airplane_materials.color",
	CreatedAt:       "airplane_materials.created_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AirplaneMaterialWhere = struct {
	ID              whereHelperint
	AirplaneModelID whereHelpernull_Int
	Name            whereHelperstring
	Description     whereHelpernull_String
	Color           whereHelpernull_String
	CreatedAt       whereHelpernull_Time
}{
	ID:              whereHelperint{field: "\"airplane_materials\".\"id\""},
	AirplaneModelID: whereHelpernull_Int{field: "\"airplane_materials\".\"airplane_model_id\""},
	Name:            whereHelperstring{field: "\"airplane_materials\".\"name\""},
	Description:     whereHelpernull_String{field: "\"airplane_materials\".\"description\""},
	Color:           whereHelpernull_String{field: "\"airplane_materials\".\"color\""},
	CreatedAt:       whereHelpernull_Time{field: "\"airplane_materials\".\"created_at\""},
}

// AirplaneMaterialRels is where relationship names are stored.
var AirplaneMaterialRels = struct {
	AirplaneModel     string
	LectureAiLectures string
}{
	AirplaneModel:     "AirplaneModel",
	LectureAiLectures: "LectureAiLectures",
}

// airplaneMaterialR is where relationships are stored.
type airplaneMaterialR struct {
	AirplaneModel     *AirplaneModel `boil:"AirplaneModel" json:"AirplaneModel" toml:"AirplaneModel" yaml:"AirplaneModel"`
	LectureAiLectures AiLectureSlice `boil:"LectureAiLectures" json:"LectureAiLectures" toml:"LectureAiLectures" yaml:"LectureAiLectures"`
}

// NewStruct creates a new relationship struct
func (*airplaneMaterialR) NewStruct() *airplaneMaterialR {
	return &airplaneMaterialR{}
}

func (r *airplaneMaterialR) GetAirplaneModel() *AirplaneModel {
	if r == nil {
		return nil
	}
	return r.AirplaneModel
}

func (r *airplaneMaterialR) GetLectureAiLectures() AiLectureSlice {
	if r == nil {
		return nil
	}
	return r.LectureAiLectures
}

// airplaneMaterialL is where Load methods for each relationship are stored.
type airplaneMaterialL struct{}

var (
	airplaneMaterialAllColumns            = []string{"id", "airplane_model_id", "name", "description", "color", "created_at"}
	airplaneMaterialColumnsWithoutDefault = []string{"name"}
	airplaneMaterialColumnsWithDefault    = []string{"id", "airplane_model_id", "description", "color", "created_at"}
	airplaneMaterialPrimaryKeyColumns     = []string{"id"}
	airplaneMaterialGeneratedColumns      = []string{}
)

type (
	// AirplaneMaterialSlice is an alias for a slice of pointers to AirplaneMaterial.
	// This should almost always be used instead of []AirplaneMaterial.
	AirplaneMaterialSlice []*AirplaneMaterial
	// AirplaneMaterialHook is the signature for custom AirplaneMaterial hook methods
	AirplaneMaterialHook func(context.Context, boil.ContextExecutor, *AirplaneMaterial) error

	airplaneMaterialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	airplaneMaterialType                 = reflect.TypeOf(&AirplaneMaterial{})
	airplaneMaterialMapping              = queries.MakeStructMapping(airplaneMaterialType)
	airplaneMaterialPrimaryKeyMapping, _ = queries.BindMapping(airplaneMaterialType, airplaneMaterialMapping, airplaneMaterialPrimaryKeyColumns)
	airplaneMaterialInsertCacheMut       sync.RWMutex
	airplaneMaterialInsertCache          = make(map[string]insertCache)
	airplaneMaterialUpdateCacheMut       sync.RWMutex
	airplaneMaterialUpdateCache          = make(map[string]updateCache)
	airplaneMaterialUpsertCacheMut       sync.RWMutex
	airplaneMaterialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var airplaneMaterialAfterSelectMu sync.Mutex
var airplaneMaterialAfterSelectHooks []AirplaneMaterialHook

var airplaneMaterialBeforeInsertMu sync.Mutex
var airplaneMaterialBeforeInsertHooks []AirplaneMaterialHook
var airplaneMaterialAfterInsertMu sync.Mutex
var airplaneMaterialAfterInsertHooks []AirplaneMaterialHook

var airplaneMaterialBeforeUpdateMu sync.Mutex
var airplaneMaterialBeforeUpdateHooks []AirplaneMaterialHook
var airplaneMaterialAfterUpdateMu sync.Mutex
var airplaneMaterialAfterUpdateHooks []AirplaneMaterialHook

var airplaneMaterialBeforeDeleteMu sync.Mutex
var airplaneMaterialBeforeDeleteHooks []AirplaneMaterialHook
var airplaneMaterialAfterDeleteMu sync.Mutex
var airplaneMaterialAfterDeleteHooks []AirplaneMaterialHook

var airplaneMaterialBeforeUpsertMu sync.Mutex
var airplaneMaterialBeforeUpsertHooks []AirplaneMaterialHook
var airplaneMaterialAfterUpsertMu sync.Mutex
var airplaneMaterialAfterUpsertHooks []AirplaneMaterialHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AirplaneMaterial) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneMaterialAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AirplaneMaterial) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneMaterialBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AirplaneMaterial) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneMaterialAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AirplaneMaterial) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneMaterialBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AirplaneMaterial) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneMaterialAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AirplaneMaterial) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneMaterialBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AirplaneMaterial) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneMaterialAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AirplaneMaterial) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneMaterialBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AirplaneMaterial) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneMaterialAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAirplaneMaterialHook registers your hook function for all future operations.
func AddAirplaneMaterialHook(hookPoint boil.HookPoint, airplaneMaterialHook AirplaneMaterialHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		airplaneMaterialAfterSelectMu.Lock()
		airplaneMaterialAfterSelectHooks = append(airplaneMaterialAfterSelectHooks, airplaneMaterialHook)
		airplaneMaterialAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		airplaneMaterialBeforeInsertMu.Lock()
		airplaneMaterialBeforeInsertHooks = append(airplaneMaterialBeforeInsertHooks, airplaneMaterialHook)
		airplaneMaterialBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		airplaneMaterialAfterInsertMu.Lock()
		airplaneMaterialAfterInsertHooks = append(airplaneMaterialAfterInsertHooks, airplaneMaterialHook)
		airplaneMaterialAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		airplaneMaterialBeforeUpdateMu.Lock()
		airplaneMaterialBeforeUpdateHooks = append(airplaneMaterialBeforeUpdateHooks, airplaneMaterialHook)
		airplaneMaterialBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		airplaneMaterialAfterUpdateMu.Lock()
		airplaneMaterialAfterUpdateHooks = append(airplaneMaterialAfterUpdateHooks, airplaneMaterialHook)
		airplaneMaterialAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		airplaneMaterialBeforeDeleteMu.Lock()
		airplaneMaterialBeforeDeleteHooks = append(airplaneMaterialBeforeDeleteHooks, airplaneMaterialHook)
		airplaneMaterialBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		airplaneMaterialAfterDeleteMu.Lock()
		airplaneMaterialAfterDeleteHooks = append(airplaneMaterialAfterDeleteHooks, airplaneMaterialHook)
		airplaneMaterialAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		airplaneMaterialBeforeUpsertMu.Lock()
		airplaneMaterialBeforeUpsertHooks = append(airplaneMaterialBeforeUpsertHooks, airplaneMaterialHook)
		airplaneMaterialBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		airplaneMaterialAfterUpsertMu.Lock()
		airplaneMaterialAfterUpsertHooks = append(airplaneMaterialAfterUpsertHooks, airplaneMaterialHook)
		airplaneMaterialAfterUpsertMu.Unlock()
	}
}

// One returns a single airplaneMaterial record from the query.
func (q airplaneMaterialQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AirplaneMaterial, error) {
	o := &AirplaneMaterial{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for airplane_materials")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AirplaneMaterial records from the query.
func (q airplaneMaterialQuery) All(ctx context.Context, exec boil.ContextExecutor) (AirplaneMaterialSlice, error) {
	var o []*AirplaneMaterial

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to AirplaneMaterial slice")
	}

	if len(airplaneMaterialAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AirplaneMaterial records in the query.
func (q airplaneMaterialQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count airplane_materials rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q airplaneMaterialQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if airplane_materials exists")
	}

	return count > 0, nil
}

// AirplaneModel pointed to by the foreign key.
func (o *AirplaneMaterial) AirplaneModel(mods ...qm.QueryMod) airplaneModelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AirplaneModelID),
	}

	queryMods = append(queryMods, mods...)

	return AirplaneModels(queryMods...)
}

// LectureAiLectures retrieves all the ai_lecture's AiLectures with an executor via id column.
func (o *AirplaneMaterial) LectureAiLectures(mods ...qm.QueryMod) aiLectureQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"airplane_material_lectures\" on \"ai_lectures\".\"id\" = \"airplane_material_lectures\".\"lecture_id\""),
		qm.Where("\"airplane_material_lectures\".\"airplane_material_id\"=?", o.ID),
	)

	return AiLectures(queryMods...)
}

// LoadAirplaneModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (airplaneMaterialL) LoadAirplaneModel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAirplaneMaterial interface{}, mods queries.Applicator) error {
	var slice []*AirplaneMaterial
	var object *AirplaneMaterial

	if singular {
		var ok bool
		object, ok = maybeAirplaneMaterial.(*AirplaneMaterial)
		if !ok {
			object = new(AirplaneMaterial)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAirplaneMaterial)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAirplaneMaterial))
			}
		}
	} else {
		s, ok := maybeAirplaneMaterial.(*[]*AirplaneMaterial)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAirplaneMaterial)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAirplaneMaterial))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &airplaneMaterialR{}
		}
		if !queries.IsNil(object.AirplaneModelID) {
			args[object.AirplaneModelID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &airplaneMaterialR{}
			}

			if !queries.IsNil(obj.AirplaneModelID) {
				args[obj.AirplaneModelID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`airplane_models`),
		qm.WhereIn(`airplane_models.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AirplaneModel")
	}

	var resultSlice []*AirplaneModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AirplaneModel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for airplane_models")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for airplane_models")
	}

	if len(airplaneModelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AirplaneModel = foreign
		if foreign.R == nil {
			foreign.R = &airplaneModelR{}
		}
		foreign.R.AirplaneMaterials = append(foreign.R.AirplaneMaterials, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AirplaneModelID, foreign.ID) {
				local.R.AirplaneModel = foreign
				if foreign.R == nil {
					foreign.R = &airplaneModelR{}
				}
				foreign.R.AirplaneMaterials = append(foreign.R.AirplaneMaterials, local)
				break
			}
		}
	}

	return nil
}

// LoadLectureAiLectures allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (airplaneMaterialL) LoadLectureAiLectures(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAirplaneMaterial interface{}, mods queries.Applicator) error {
	var slice []*AirplaneMaterial
	var object *AirplaneMaterial

	if singular {
		var ok bool
		object, ok = maybeAirplaneMaterial.(*AirplaneMaterial)
		if !ok {
			object = new(AirplaneMaterial)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAirplaneMaterial)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAirplaneMaterial))
			}
		}
	} else {
		s, ok := maybeAirplaneMaterial.(*[]*AirplaneMaterial)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAirplaneMaterial)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAirplaneMaterial))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &airplaneMaterialR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &airplaneMaterialR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"ai_lectures\".\"id\", \"ai_lectures\".\"title\", \"ai_lectures\".\"content\", \"ai_lectures\".\"author\", \"ai_lectures\".\"created_at\", \"ai_lectures\".\"updated_at\", \"a\".\"airplane_material_id\""),
		qm.From("\"ai_lectures\""),
		qm.InnerJoin("\"airplane_material_lectures\" as \"a\" on \"ai_lectures\".\"id\" = \"a\".\"lecture_id\""),
		qm.WhereIn("\"a\".\"airplane_material_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ai_lectures")
	}

	var resultSlice []*AiLecture

	var localJoinCols []int
	for results.Next() {
		one := new(AiLecture)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Title, &one.Content, &one.Author, &one.CreatedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for ai_lectures")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice ai_lectures")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ai_lectures")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ai_lectures")
	}

	if len(aiLectureAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LectureAiLectures = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &aiLectureR{}
			}
			foreign.R.AirplaneMaterials = append(foreign.R.AirplaneMaterials, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.LectureAiLectures = append(local.R.LectureAiLectures, foreign)
				if foreign.R == nil {
					foreign.R = &aiLectureR{}
				}
				foreign.R.AirplaneMaterials = append(foreign.R.AirplaneMaterials, local)
				break
			}
		}
	}

	return nil
}

// SetAirplaneModel of the airplaneMaterial to the related item.
// Sets o.R.AirplaneModel to related.
// Adds o to related.R.AirplaneMaterials.
func (o *AirplaneMaterial) SetAirplaneModel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AirplaneModel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"airplane_materials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"airplane_model_id"}),
		strmangle.WhereClause("\"", "\"", 2, airplaneMaterialPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AirplaneModelID, related.ID)
	if o.R == nil {
		o.R = &airplaneMaterialR{
			AirplaneModel: related,
		}
	} else {
		o.R.AirplaneModel = related
	}

	if related.R == nil {
		related.R = &airplaneModelR{
			AirplaneMaterials: AirplaneMaterialSlice{o},
		}
	} else {
		related.R.AirplaneMaterials = append(related.R.AirplaneMaterials, o)
	}

	return nil
}

// RemoveAirplaneModel relationship.
// Sets o.R.AirplaneModel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AirplaneMaterial) RemoveAirplaneModel(ctx context.Context, exec boil.ContextExecutor, related *AirplaneModel) error {
	var err error

	queries.SetScanner(&o.AirplaneModelID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("airplane_model_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AirplaneModel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AirplaneMaterials {
		if queries.Equal(o.AirplaneModelID, ri.AirplaneModelID) {
			continue
		}

		ln := len(related.R.AirplaneMaterials)
		if ln > 1 && i < ln-1 {
			related.R.AirplaneMaterials[i] = related.R.AirplaneMaterials[ln-1]
		}
		related.R.AirplaneMaterials = related.R.AirplaneMaterials[:ln-1]
		break
	}
	return nil
}

// AddLectureAiLectures adds the given related objects to the existing relationships
// of the airplane_material, optionally inserting them as new records.
// Appends related to o.R.LectureAiLectures.
// Sets related.R.AirplaneMaterials appropriately.
func (o *AirplaneMaterial) AddLectureAiLectures(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AiLecture) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"airplane_material_lectures\" (\"airplane_material_id\", \"lecture_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &airplaneMaterialR{
			LectureAiLectures: related,
		}
	} else {
		o.R.LectureAiLectures = append(o.R.LectureAiLectures, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &aiLectureR{
				AirplaneMaterials: AirplaneMaterialSlice{o},
			}
		} else {
			rel.R.AirplaneMaterials = append(rel.R.AirplaneMaterials, o)
		}
	}
	return nil
}

// SetLectureAiLectures removes all previously related items of the
// airplane_material replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AirplaneMaterials's LectureAiLectures accordingly.
// Replaces o.R.LectureAiLectures with related.
// Sets related.R.AirplaneMaterials's LectureAiLectures accordingly.
func (o *AirplaneMaterial) SetLectureAiLectures(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AiLecture) error {
	query := "delete from \"airplane_material_lectures\" where \"airplane_material_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeLectureAiLecturesFromAirplaneMaterialsSlice(o, related)
	if o.R != nil {
		o.R.LectureAiLectures = nil
	}

	return o.AddLectureAiLectures(ctx, exec, insert, related...)
}

// RemoveLectureAiLectures relationships from objects passed in.
// Removes related items from R.LectureAiLectures (uses pointer comparison, removal does not keep order)
// Sets related.R.AirplaneMaterials.
func (o *AirplaneMaterial) RemoveLectureAiLectures(ctx context.Context, exec boil.ContextExecutor, related ...*AiLecture) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"airplane_material_lectures\" where \"airplane_material_id\" = $1 and \"lecture_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeLectureAiLecturesFromAirplaneMaterialsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LectureAiLectures {
			if rel != ri {
				continue
			}

			ln := len(o.R.LectureAiLectures)
			if ln > 1 && i < ln-1 {
				o.R.LectureAiLectures[i] = o.R.LectureAiLectures[ln-1]
			}
			o.R.LectureAiLectures = o.R.LectureAiLectures[:ln-1]
			break
		}
	}

	return nil
}

func removeLectureAiLecturesFromAirplaneMaterialsSlice(o *AirplaneMaterial, related []*AiLecture) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.AirplaneMaterials {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.AirplaneMaterials)
			if ln > 1 && i < ln-1 {
				rel.R.AirplaneMaterials[i] = rel.R.AirplaneMaterials[ln-1]
			}
			rel.R.AirplaneMaterials = rel.R.AirplaneMaterials[:ln-1]
			break
		}
	}
}

// AirplaneMaterials retrieves all the records using an executor.
func AirplaneMaterials(mods ...qm.QueryMod) airplaneMaterialQuery {
	mods = append(mods, qm.From("\"airplane_materials\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"airplane_materials\".*"})
	}

	return airplaneMaterialQuery{q}
}

// FindAirplaneMaterial retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAirplaneMaterial(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AirplaneMaterial, error) {
	airplaneMaterialObj := &AirplaneMaterial{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"airplane_materials\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, airplaneMaterialObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from airplane_materials")
	}

	if err = airplaneMaterialObj.doAfterSelectHooks(ctx, exec); err != nil {
		return airplaneMaterialObj, err
	}

	return airplaneMaterialObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AirplaneMaterial) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no airplane_materials provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(airplaneMaterialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	airplaneMaterialInsertCacheMut.RLock()
	cache, cached := airplaneMaterialInsertCache[key]
	airplaneMaterialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			airplaneMaterialAllColumns,
			airplaneMaterialColumnsWithDefault,
			airplaneMaterialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(airplaneMaterialType, airplaneMaterialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(airplaneMaterialType, airplaneMaterialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"airplane_materials\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"airplane_materials\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into airplane_materials")
	}

	if !cached {
		airplaneMaterialInsertCacheMut.Lock()
		airplaneMaterialInsertCache[key] = cache
		airplaneMaterialInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AirplaneMaterial.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AirplaneMaterial) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	airplaneMaterialUpdateCacheMut.RLock()
	cache, cached := airplaneMaterialUpdateCache[key]
	airplaneMaterialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			airplaneMaterialAllColumns,
			airplaneMaterialPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update airplane_materials, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"airplane_materials\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, airplaneMaterialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(airplaneMaterialType, airplaneMaterialMapping, append(wl, airplaneMaterialPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update airplane_materials row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for airplane_materials")
	}

	if !cached {
		airplaneMaterialUpdateCacheMut.Lock()
		airplaneMaterialUpdateCache[key] = cache
		airplaneMaterialUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q airplaneMaterialQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for airplane_materials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for airplane_materials")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AirplaneMaterialSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), airplaneMaterialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"airplane_materials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, airplaneMaterialPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in airplaneMaterial slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all airplaneMaterial")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AirplaneMaterial) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no airplane_materials provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(airplaneMaterialColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	airplaneMaterialUpsertCacheMut.RLock()
	cache, cached := airplaneMaterialUpsertCache[key]
	airplaneMaterialUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			airplaneMaterialAllColumns,
			airplaneMaterialColumnsWithDefault,
			airplaneMaterialColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			airplaneMaterialAllColumns,
			airplaneMaterialPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert airplane_materials, could not build update column list")
		}

		ret := strmangle.SetComplement(airplaneMaterialAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(airplaneMaterialPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert airplane_materials, could not build conflict column list")
			}

			conflict = make([]string, len(airplaneMaterialPrimaryKeyColumns))
			copy(conflict, airplaneMaterialPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"airplane_materials\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(airplaneMaterialType, airplaneMaterialMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(airplaneMaterialType, airplaneMaterialMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert airplane_materials")
	}

	if !cached {
		airplaneMaterialUpsertCacheMut.Lock()
		airplaneMaterialUpsertCache[key] = cache
		airplaneMaterialUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AirplaneMaterial record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AirplaneMaterial) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no AirplaneMaterial provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), airplaneMaterialPrimaryKeyMapping)
	sql := "DELETE FROM \"airplane_materials\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from airplane_materials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for airplane_materials")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q airplaneMaterialQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no airplaneMaterialQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from airplane_materials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for airplane_materials")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AirplaneMaterialSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(airplaneMaterialBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), airplaneMaterialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"airplane_materials\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, airplaneMaterialPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from airplaneMaterial slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for airplane_materials")
	}

	if len(airplaneMaterialAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AirplaneMaterial) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAirplaneMaterial(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AirplaneMaterialSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AirplaneMaterialSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), airplaneMaterialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"airplane_materials\".* FROM \"airplane_materials\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, airplaneMaterialPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in AirplaneMaterialSlice")
	}

	*o = slice

	return nil
}

// AirplaneMaterialExists checks if the AirplaneMaterial row exists.
func AirplaneMaterialExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"airplane_materials\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if airplane_materials exists")
	}

	return exists, nil
}

// Exists checks if the AirplaneMaterial row exists.
func (o *AirplaneMaterial) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AirplaneMaterialExists(ctx, exec, o.ID)
}
