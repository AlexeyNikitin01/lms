// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Recommendation is an object representing the database table.
type Recommendation struct {
	ID                 int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	AnalysisID         int      `boil:"analysis_id" json:"analysis_id" toml:"analysis_id" yaml:"analysis_id"`
	RecommendationText string   `boil:"recommendation_text" json:"recommendation_text" toml:"recommendation_text" yaml:"recommendation_text"`
	Priority           null.Int `boil:"priority" json:"priority,omitempty" toml:"priority" yaml:"priority,omitempty"`

	R *recommendationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recommendationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecommendationColumns = struct {
	ID                 string
	AnalysisID         string
	RecommendationText string
	Priority           string
}{
	ID:                 "id",
	AnalysisID:         "analysis_id",
	RecommendationText: "recommendation_text",
	Priority:           "priority",
}

var RecommendationTableColumns = struct {
	ID                 string
	AnalysisID         string
	RecommendationText string
	Priority           string
}{
	ID:                 "recommendations.id",
	AnalysisID:         "recommendations.analysis_id",
	RecommendationText: "recommendations.recommendation_text",
	Priority:           "recommendations.priority",
}

// Generated where

var RecommendationWhere = struct {
	ID                 whereHelperint
	AnalysisID         whereHelperint
	RecommendationText whereHelperstring
	Priority           whereHelpernull_Int
}{
	ID:                 whereHelperint{field: "\"recommendations\".\"id\""},
	AnalysisID:         whereHelperint{field: "\"recommendations\".\"analysis_id\""},
	RecommendationText: whereHelperstring{field: "\"recommendations\".\"recommendation_text\""},
	Priority:           whereHelpernull_Int{field: "\"recommendations\".\"priority\""},
}

// RecommendationRels is where relationship names are stored.
var RecommendationRels = struct {
	Analysis string
}{
	Analysis: "Analysis",
}

// recommendationR is where relationships are stored.
type recommendationR struct {
	Analysis *AnalysisResult `boil:"Analysis" json:"Analysis" toml:"Analysis" yaml:"Analysis"`
}

// NewStruct creates a new relationship struct
func (*recommendationR) NewStruct() *recommendationR {
	return &recommendationR{}
}

func (r *recommendationR) GetAnalysis() *AnalysisResult {
	if r == nil {
		return nil
	}
	return r.Analysis
}

// recommendationL is where Load methods for each relationship are stored.
type recommendationL struct{}

var (
	recommendationAllColumns            = []string{"id", "analysis_id", "recommendation_text", "priority"}
	recommendationColumnsWithoutDefault = []string{"analysis_id", "recommendation_text"}
	recommendationColumnsWithDefault    = []string{"id", "priority"}
	recommendationPrimaryKeyColumns     = []string{"id"}
	recommendationGeneratedColumns      = []string{}
)

type (
	// RecommendationSlice is an alias for a slice of pointers to Recommendation.
	// This should almost always be used instead of []Recommendation.
	RecommendationSlice []*Recommendation
	// RecommendationHook is the signature for custom Recommendation hook methods
	RecommendationHook func(context.Context, boil.ContextExecutor, *Recommendation) error

	recommendationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recommendationType                 = reflect.TypeOf(&Recommendation{})
	recommendationMapping              = queries.MakeStructMapping(recommendationType)
	recommendationPrimaryKeyMapping, _ = queries.BindMapping(recommendationType, recommendationMapping, recommendationPrimaryKeyColumns)
	recommendationInsertCacheMut       sync.RWMutex
	recommendationInsertCache          = make(map[string]insertCache)
	recommendationUpdateCacheMut       sync.RWMutex
	recommendationUpdateCache          = make(map[string]updateCache)
	recommendationUpsertCacheMut       sync.RWMutex
	recommendationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recommendationAfterSelectMu sync.Mutex
var recommendationAfterSelectHooks []RecommendationHook

var recommendationBeforeInsertMu sync.Mutex
var recommendationBeforeInsertHooks []RecommendationHook
var recommendationAfterInsertMu sync.Mutex
var recommendationAfterInsertHooks []RecommendationHook

var recommendationBeforeUpdateMu sync.Mutex
var recommendationBeforeUpdateHooks []RecommendationHook
var recommendationAfterUpdateMu sync.Mutex
var recommendationAfterUpdateHooks []RecommendationHook

var recommendationBeforeDeleteMu sync.Mutex
var recommendationBeforeDeleteHooks []RecommendationHook
var recommendationAfterDeleteMu sync.Mutex
var recommendationAfterDeleteHooks []RecommendationHook

var recommendationBeforeUpsertMu sync.Mutex
var recommendationBeforeUpsertHooks []RecommendationHook
var recommendationAfterUpsertMu sync.Mutex
var recommendationAfterUpsertHooks []RecommendationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Recommendation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Recommendation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Recommendation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Recommendation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Recommendation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Recommendation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Recommendation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Recommendation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Recommendation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecommendationHook registers your hook function for all future operations.
func AddRecommendationHook(hookPoint boil.HookPoint, recommendationHook RecommendationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recommendationAfterSelectMu.Lock()
		recommendationAfterSelectHooks = append(recommendationAfterSelectHooks, recommendationHook)
		recommendationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		recommendationBeforeInsertMu.Lock()
		recommendationBeforeInsertHooks = append(recommendationBeforeInsertHooks, recommendationHook)
		recommendationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		recommendationAfterInsertMu.Lock()
		recommendationAfterInsertHooks = append(recommendationAfterInsertHooks, recommendationHook)
		recommendationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		recommendationBeforeUpdateMu.Lock()
		recommendationBeforeUpdateHooks = append(recommendationBeforeUpdateHooks, recommendationHook)
		recommendationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		recommendationAfterUpdateMu.Lock()
		recommendationAfterUpdateHooks = append(recommendationAfterUpdateHooks, recommendationHook)
		recommendationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		recommendationBeforeDeleteMu.Lock()
		recommendationBeforeDeleteHooks = append(recommendationBeforeDeleteHooks, recommendationHook)
		recommendationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		recommendationAfterDeleteMu.Lock()
		recommendationAfterDeleteHooks = append(recommendationAfterDeleteHooks, recommendationHook)
		recommendationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		recommendationBeforeUpsertMu.Lock()
		recommendationBeforeUpsertHooks = append(recommendationBeforeUpsertHooks, recommendationHook)
		recommendationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		recommendationAfterUpsertMu.Lock()
		recommendationAfterUpsertHooks = append(recommendationAfterUpsertHooks, recommendationHook)
		recommendationAfterUpsertMu.Unlock()
	}
}

// One returns a single recommendation record from the query.
func (q recommendationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Recommendation, error) {
	o := &Recommendation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for recommendations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Recommendation records from the query.
func (q recommendationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecommendationSlice, error) {
	var o []*Recommendation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Recommendation slice")
	}

	if len(recommendationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Recommendation records in the query.
func (q recommendationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count recommendations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recommendationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if recommendations exists")
	}

	return count > 0, nil
}

// Analysis pointed to by the foreign key.
func (o *Recommendation) Analysis(mods ...qm.QueryMod) analysisResultQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AnalysisID),
	}

	queryMods = append(queryMods, mods...)

	return AnalysisResults(queryMods...)
}

// LoadAnalysis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recommendationL) LoadAnalysis(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecommendation interface{}, mods queries.Applicator) error {
	var slice []*Recommendation
	var object *Recommendation

	if singular {
		var ok bool
		object, ok = maybeRecommendation.(*Recommendation)
		if !ok {
			object = new(Recommendation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecommendation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecommendation))
			}
		}
	} else {
		s, ok := maybeRecommendation.(*[]*Recommendation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecommendation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecommendation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recommendationR{}
		}
		args[object.AnalysisID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recommendationR{}
			}

			args[obj.AnalysisID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`analysis_results`),
		qm.WhereIn(`analysis_results.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AnalysisResult")
	}

	var resultSlice []*AnalysisResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AnalysisResult")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for analysis_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for analysis_results")
	}

	if len(analysisResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Analysis = foreign
		if foreign.R == nil {
			foreign.R = &analysisResultR{}
		}
		foreign.R.AnalysisRecommendations = append(foreign.R.AnalysisRecommendations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AnalysisID == foreign.ID {
				local.R.Analysis = foreign
				if foreign.R == nil {
					foreign.R = &analysisResultR{}
				}
				foreign.R.AnalysisRecommendations = append(foreign.R.AnalysisRecommendations, local)
				break
			}
		}
	}

	return nil
}

// SetAnalysis of the recommendation to the related item.
// Sets o.R.Analysis to related.
// Adds o to related.R.AnalysisRecommendations.
func (o *Recommendation) SetAnalysis(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AnalysisResult) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recommendations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"analysis_id"}),
		strmangle.WhereClause("\"", "\"", 2, recommendationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AnalysisID = related.ID
	if o.R == nil {
		o.R = &recommendationR{
			Analysis: related,
		}
	} else {
		o.R.Analysis = related
	}

	if related.R == nil {
		related.R = &analysisResultR{
			AnalysisRecommendations: RecommendationSlice{o},
		}
	} else {
		related.R.AnalysisRecommendations = append(related.R.AnalysisRecommendations, o)
	}

	return nil
}

// Recommendations retrieves all the records using an executor.
func Recommendations(mods ...qm.QueryMod) recommendationQuery {
	mods = append(mods, qm.From("\"recommendations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"recommendations\".*"})
	}

	return recommendationQuery{q}
}

// FindRecommendation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecommendation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Recommendation, error) {
	recommendationObj := &Recommendation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recommendations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recommendationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from recommendations")
	}

	if err = recommendationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recommendationObj, err
	}

	return recommendationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Recommendation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no recommendations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recommendationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recommendationInsertCacheMut.RLock()
	cache, cached := recommendationInsertCache[key]
	recommendationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recommendationAllColumns,
			recommendationColumnsWithDefault,
			recommendationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recommendationType, recommendationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recommendationType, recommendationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recommendations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recommendations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into recommendations")
	}

	if !cached {
		recommendationInsertCacheMut.Lock()
		recommendationInsertCache[key] = cache
		recommendationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Recommendation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Recommendation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recommendationUpdateCacheMut.RLock()
	cache, cached := recommendationUpdateCache[key]
	recommendationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recommendationAllColumns,
			recommendationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update recommendations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recommendations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recommendationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recommendationType, recommendationMapping, append(wl, recommendationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update recommendations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for recommendations")
	}

	if !cached {
		recommendationUpdateCacheMut.Lock()
		recommendationUpdateCache[key] = cache
		recommendationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recommendationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for recommendations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for recommendations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecommendationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recommendationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recommendations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recommendationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in recommendation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all recommendation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Recommendation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no recommendations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recommendationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recommendationUpsertCacheMut.RLock()
	cache, cached := recommendationUpsertCache[key]
	recommendationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			recommendationAllColumns,
			recommendationColumnsWithDefault,
			recommendationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			recommendationAllColumns,
			recommendationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert recommendations, could not build update column list")
		}

		ret := strmangle.SetComplement(recommendationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(recommendationPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert recommendations, could not build conflict column list")
			}

			conflict = make([]string, len(recommendationPrimaryKeyColumns))
			copy(conflict, recommendationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recommendations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(recommendationType, recommendationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recommendationType, recommendationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert recommendations")
	}

	if !cached {
		recommendationUpsertCacheMut.Lock()
		recommendationUpsertCache[key] = cache
		recommendationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Recommendation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Recommendation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Recommendation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recommendationPrimaryKeyMapping)
	sql := "DELETE FROM \"recommendations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from recommendations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for recommendations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recommendationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no recommendationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from recommendations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for recommendations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecommendationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recommendationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recommendationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recommendations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recommendationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from recommendation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for recommendations")
	}

	if len(recommendationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Recommendation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecommendation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecommendationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecommendationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recommendationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recommendations\".* FROM \"recommendations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recommendationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in RecommendationSlice")
	}

	*o = slice

	return nil
}

// RecommendationExists checks if the Recommendation row exists.
func RecommendationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recommendations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if recommendations exists")
	}

	return exists, nil
}

// Exists checks if the Recommendation row exists.
func (o *Recommendation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RecommendationExists(ctx, exec, o.ID)
}
