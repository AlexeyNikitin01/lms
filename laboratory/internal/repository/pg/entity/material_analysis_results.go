// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MaterialAnalysisResult is an object representing the database table.
type MaterialAnalysisResult struct {
	ID              int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	LectureID       null.Int   `boil:"lecture_id" json:"lecture_id,omitempty" toml:"lecture_id" yaml:"lecture_id,omitempty"`
	LabID           null.Int   `boil:"lab_id" json:"lab_id,omitempty" toml:"lab_id" yaml:"lab_id,omitempty"`
	AirplaneModelID null.Int   `boil:"airplane_model_id" json:"airplane_model_id,omitempty" toml:"airplane_model_id" yaml:"airplane_model_id,omitempty"`
	ImagePath       string     `boil:"image_path" json:"image_path" toml:"image_path" yaml:"image_path"`
	Defects         types.JSON `boil:"defects" json:"defects" toml:"defects" yaml:"defects"`
	Recommendations string     `boil:"recommendations" json:"recommendations" toml:"recommendations" yaml:"recommendations"`
	AnalysisDate    time.Time  `boil:"analysis_date" json:"analysis_date" toml:"analysis_date" yaml:"analysis_date"`
	CreatedAt       time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *materialAnalysisResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L materialAnalysisResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MaterialAnalysisResultColumns = struct {
	ID              string
	LectureID       string
	LabID           string
	AirplaneModelID string
	ImagePath       string
	Defects         string
	Recommendations string
	AnalysisDate    string
	CreatedAt       string
}{
	ID:              "id",
	LectureID:       "lecture_id",
	LabID:           "lab_id",
	AirplaneModelID: "airplane_model_id",
	ImagePath:       "image_path",
	Defects:         "defects",
	Recommendations: "recommendations",
	AnalysisDate:    "analysis_date",
	CreatedAt:       "created_at",
}

var MaterialAnalysisResultTableColumns = struct {
	ID              string
	LectureID       string
	LabID           string
	AirplaneModelID string
	ImagePath       string
	Defects         string
	Recommendations string
	AnalysisDate    string
	CreatedAt       string
}{
	ID:              "material_analysis_results.id",
	LectureID:       "material_analysis_results.lecture_id",
	LabID:           "material_analysis_results.lab_id",
	AirplaneModelID: "material_analysis_results.airplane_model_id",
	ImagePath:       "material_analysis_results.image_path",
	Defects:         "material_analysis_results.defects",
	Recommendations: "material_analysis_results.recommendations",
	AnalysisDate:    "material_analysis_results.analysis_date",
	CreatedAt:       "material_analysis_results.created_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MaterialAnalysisResultWhere = struct {
	ID              whereHelperint
	LectureID       whereHelpernull_Int
	LabID           whereHelpernull_Int
	AirplaneModelID whereHelpernull_Int
	ImagePath       whereHelperstring
	Defects         whereHelpertypes_JSON
	Recommendations whereHelperstring
	AnalysisDate    whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
}{
	ID:              whereHelperint{field: "\"material_analysis_results\".\"id\""},
	LectureID:       whereHelpernull_Int{field: "\"material_analysis_results\".\"lecture_id\""},
	LabID:           whereHelpernull_Int{field: "\"material_analysis_results\".\"lab_id\""},
	AirplaneModelID: whereHelpernull_Int{field: "\"material_analysis_results\".\"airplane_model_id\""},
	ImagePath:       whereHelperstring{field: "\"material_analysis_results\".\"image_path\""},
	Defects:         whereHelpertypes_JSON{field: "\"material_analysis_results\".\"defects\""},
	Recommendations: whereHelperstring{field: "\"material_analysis_results\".\"recommendations\""},
	AnalysisDate:    whereHelpertime_Time{field: "\"material_analysis_results\".\"analysis_date\""},
	CreatedAt:       whereHelpertime_Time{field: "\"material_analysis_results\".\"created_at\""},
}

// MaterialAnalysisResultRels is where relationship names are stored.
var MaterialAnalysisResultRels = struct {
	AirplaneModel string
	Lab           string
	Lecture       string
}{
	AirplaneModel: "AirplaneModel",
	Lab:           "Lab",
	Lecture:       "Lecture",
}

// materialAnalysisResultR is where relationships are stored.
type materialAnalysisResultR struct {
	AirplaneModel *AirplaneModel `boil:"AirplaneModel" json:"AirplaneModel" toml:"AirplaneModel" yaml:"AirplaneModel"`
	Lab           *Lab           `boil:"Lab" json:"Lab" toml:"Lab" yaml:"Lab"`
	Lecture       *AiLecture     `boil:"Lecture" json:"Lecture" toml:"Lecture" yaml:"Lecture"`
}

// NewStruct creates a new relationship struct
func (*materialAnalysisResultR) NewStruct() *materialAnalysisResultR {
	return &materialAnalysisResultR{}
}

func (r *materialAnalysisResultR) GetAirplaneModel() *AirplaneModel {
	if r == nil {
		return nil
	}
	return r.AirplaneModel
}

func (r *materialAnalysisResultR) GetLab() *Lab {
	if r == nil {
		return nil
	}
	return r.Lab
}

func (r *materialAnalysisResultR) GetLecture() *AiLecture {
	if r == nil {
		return nil
	}
	return r.Lecture
}

// materialAnalysisResultL is where Load methods for each relationship are stored.
type materialAnalysisResultL struct{}

var (
	materialAnalysisResultAllColumns            = []string{"id", "lecture_id", "lab_id", "airplane_model_id", "image_path", "defects", "recommendations", "analysis_date", "created_at"}
	materialAnalysisResultColumnsWithoutDefault = []string{"image_path", "defects", "recommendations"}
	materialAnalysisResultColumnsWithDefault    = []string{"id", "lecture_id", "lab_id", "airplane_model_id", "analysis_date", "created_at"}
	materialAnalysisResultPrimaryKeyColumns     = []string{"id"}
	materialAnalysisResultGeneratedColumns      = []string{}
)

type (
	// MaterialAnalysisResultSlice is an alias for a slice of pointers to MaterialAnalysisResult.
	// This should almost always be used instead of []MaterialAnalysisResult.
	MaterialAnalysisResultSlice []*MaterialAnalysisResult
	// MaterialAnalysisResultHook is the signature for custom MaterialAnalysisResult hook methods
	MaterialAnalysisResultHook func(context.Context, boil.ContextExecutor, *MaterialAnalysisResult) error

	materialAnalysisResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	materialAnalysisResultType                 = reflect.TypeOf(&MaterialAnalysisResult{})
	materialAnalysisResultMapping              = queries.MakeStructMapping(materialAnalysisResultType)
	materialAnalysisResultPrimaryKeyMapping, _ = queries.BindMapping(materialAnalysisResultType, materialAnalysisResultMapping, materialAnalysisResultPrimaryKeyColumns)
	materialAnalysisResultInsertCacheMut       sync.RWMutex
	materialAnalysisResultInsertCache          = make(map[string]insertCache)
	materialAnalysisResultUpdateCacheMut       sync.RWMutex
	materialAnalysisResultUpdateCache          = make(map[string]updateCache)
	materialAnalysisResultUpsertCacheMut       sync.RWMutex
	materialAnalysisResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var materialAnalysisResultAfterSelectMu sync.Mutex
var materialAnalysisResultAfterSelectHooks []MaterialAnalysisResultHook

var materialAnalysisResultBeforeInsertMu sync.Mutex
var materialAnalysisResultBeforeInsertHooks []MaterialAnalysisResultHook
var materialAnalysisResultAfterInsertMu sync.Mutex
var materialAnalysisResultAfterInsertHooks []MaterialAnalysisResultHook

var materialAnalysisResultBeforeUpdateMu sync.Mutex
var materialAnalysisResultBeforeUpdateHooks []MaterialAnalysisResultHook
var materialAnalysisResultAfterUpdateMu sync.Mutex
var materialAnalysisResultAfterUpdateHooks []MaterialAnalysisResultHook

var materialAnalysisResultBeforeDeleteMu sync.Mutex
var materialAnalysisResultBeforeDeleteHooks []MaterialAnalysisResultHook
var materialAnalysisResultAfterDeleteMu sync.Mutex
var materialAnalysisResultAfterDeleteHooks []MaterialAnalysisResultHook

var materialAnalysisResultBeforeUpsertMu sync.Mutex
var materialAnalysisResultBeforeUpsertHooks []MaterialAnalysisResultHook
var materialAnalysisResultAfterUpsertMu sync.Mutex
var materialAnalysisResultAfterUpsertHooks []MaterialAnalysisResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MaterialAnalysisResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAnalysisResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MaterialAnalysisResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAnalysisResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MaterialAnalysisResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAnalysisResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MaterialAnalysisResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAnalysisResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MaterialAnalysisResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAnalysisResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MaterialAnalysisResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAnalysisResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MaterialAnalysisResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAnalysisResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MaterialAnalysisResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAnalysisResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MaterialAnalysisResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAnalysisResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMaterialAnalysisResultHook registers your hook function for all future operations.
func AddMaterialAnalysisResultHook(hookPoint boil.HookPoint, materialAnalysisResultHook MaterialAnalysisResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		materialAnalysisResultAfterSelectMu.Lock()
		materialAnalysisResultAfterSelectHooks = append(materialAnalysisResultAfterSelectHooks, materialAnalysisResultHook)
		materialAnalysisResultAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		materialAnalysisResultBeforeInsertMu.Lock()
		materialAnalysisResultBeforeInsertHooks = append(materialAnalysisResultBeforeInsertHooks, materialAnalysisResultHook)
		materialAnalysisResultBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		materialAnalysisResultAfterInsertMu.Lock()
		materialAnalysisResultAfterInsertHooks = append(materialAnalysisResultAfterInsertHooks, materialAnalysisResultHook)
		materialAnalysisResultAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		materialAnalysisResultBeforeUpdateMu.Lock()
		materialAnalysisResultBeforeUpdateHooks = append(materialAnalysisResultBeforeUpdateHooks, materialAnalysisResultHook)
		materialAnalysisResultBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		materialAnalysisResultAfterUpdateMu.Lock()
		materialAnalysisResultAfterUpdateHooks = append(materialAnalysisResultAfterUpdateHooks, materialAnalysisResultHook)
		materialAnalysisResultAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		materialAnalysisResultBeforeDeleteMu.Lock()
		materialAnalysisResultBeforeDeleteHooks = append(materialAnalysisResultBeforeDeleteHooks, materialAnalysisResultHook)
		materialAnalysisResultBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		materialAnalysisResultAfterDeleteMu.Lock()
		materialAnalysisResultAfterDeleteHooks = append(materialAnalysisResultAfterDeleteHooks, materialAnalysisResultHook)
		materialAnalysisResultAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		materialAnalysisResultBeforeUpsertMu.Lock()
		materialAnalysisResultBeforeUpsertHooks = append(materialAnalysisResultBeforeUpsertHooks, materialAnalysisResultHook)
		materialAnalysisResultBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		materialAnalysisResultAfterUpsertMu.Lock()
		materialAnalysisResultAfterUpsertHooks = append(materialAnalysisResultAfterUpsertHooks, materialAnalysisResultHook)
		materialAnalysisResultAfterUpsertMu.Unlock()
	}
}

// One returns a single materialAnalysisResult record from the query.
func (q materialAnalysisResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MaterialAnalysisResult, error) {
	o := &MaterialAnalysisResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for material_analysis_results")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MaterialAnalysisResult records from the query.
func (q materialAnalysisResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (MaterialAnalysisResultSlice, error) {
	var o []*MaterialAnalysisResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to MaterialAnalysisResult slice")
	}

	if len(materialAnalysisResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MaterialAnalysisResult records in the query.
func (q materialAnalysisResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count material_analysis_results rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q materialAnalysisResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if material_analysis_results exists")
	}

	return count > 0, nil
}

// AirplaneModel pointed to by the foreign key.
func (o *MaterialAnalysisResult) AirplaneModel(mods ...qm.QueryMod) airplaneModelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AirplaneModelID),
	}

	queryMods = append(queryMods, mods...)

	return AirplaneModels(queryMods...)
}

// Lab pointed to by the foreign key.
func (o *MaterialAnalysisResult) Lab(mods ...qm.QueryMod) labQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LabID),
	}

	queryMods = append(queryMods, mods...)

	return Labs(queryMods...)
}

// Lecture pointed to by the foreign key.
func (o *MaterialAnalysisResult) Lecture(mods ...qm.QueryMod) aiLectureQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LectureID),
	}

	queryMods = append(queryMods, mods...)

	return AiLectures(queryMods...)
}

// LoadAirplaneModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (materialAnalysisResultL) LoadAirplaneModel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMaterialAnalysisResult interface{}, mods queries.Applicator) error {
	var slice []*MaterialAnalysisResult
	var object *MaterialAnalysisResult

	if singular {
		var ok bool
		object, ok = maybeMaterialAnalysisResult.(*MaterialAnalysisResult)
		if !ok {
			object = new(MaterialAnalysisResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMaterialAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMaterialAnalysisResult))
			}
		}
	} else {
		s, ok := maybeMaterialAnalysisResult.(*[]*MaterialAnalysisResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMaterialAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMaterialAnalysisResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &materialAnalysisResultR{}
		}
		if !queries.IsNil(object.AirplaneModelID) {
			args[object.AirplaneModelID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &materialAnalysisResultR{}
			}

			if !queries.IsNil(obj.AirplaneModelID) {
				args[obj.AirplaneModelID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`airplane_models`),
		qm.WhereIn(`airplane_models.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AirplaneModel")
	}

	var resultSlice []*AirplaneModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AirplaneModel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for airplane_models")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for airplane_models")
	}

	if len(airplaneModelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AirplaneModel = foreign
		if foreign.R == nil {
			foreign.R = &airplaneModelR{}
		}
		foreign.R.MaterialAnalysisResults = append(foreign.R.MaterialAnalysisResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AirplaneModelID, foreign.ID) {
				local.R.AirplaneModel = foreign
				if foreign.R == nil {
					foreign.R = &airplaneModelR{}
				}
				foreign.R.MaterialAnalysisResults = append(foreign.R.MaterialAnalysisResults, local)
				break
			}
		}
	}

	return nil
}

// LoadLab allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (materialAnalysisResultL) LoadLab(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMaterialAnalysisResult interface{}, mods queries.Applicator) error {
	var slice []*MaterialAnalysisResult
	var object *MaterialAnalysisResult

	if singular {
		var ok bool
		object, ok = maybeMaterialAnalysisResult.(*MaterialAnalysisResult)
		if !ok {
			object = new(MaterialAnalysisResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMaterialAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMaterialAnalysisResult))
			}
		}
	} else {
		s, ok := maybeMaterialAnalysisResult.(*[]*MaterialAnalysisResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMaterialAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMaterialAnalysisResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &materialAnalysisResultR{}
		}
		if !queries.IsNil(object.LabID) {
			args[object.LabID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &materialAnalysisResultR{}
			}

			if !queries.IsNil(obj.LabID) {
				args[obj.LabID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`labs`),
		qm.WhereIn(`labs.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Lab")
	}

	var resultSlice []*Lab
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Lab")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for labs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for labs")
	}

	if len(labAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Lab = foreign
		if foreign.R == nil {
			foreign.R = &labR{}
		}
		foreign.R.MaterialAnalysisResults = append(foreign.R.MaterialAnalysisResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LabID, foreign.ID) {
				local.R.Lab = foreign
				if foreign.R == nil {
					foreign.R = &labR{}
				}
				foreign.R.MaterialAnalysisResults = append(foreign.R.MaterialAnalysisResults, local)
				break
			}
		}
	}

	return nil
}

// LoadLecture allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (materialAnalysisResultL) LoadLecture(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMaterialAnalysisResult interface{}, mods queries.Applicator) error {
	var slice []*MaterialAnalysisResult
	var object *MaterialAnalysisResult

	if singular {
		var ok bool
		object, ok = maybeMaterialAnalysisResult.(*MaterialAnalysisResult)
		if !ok {
			object = new(MaterialAnalysisResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMaterialAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMaterialAnalysisResult))
			}
		}
	} else {
		s, ok := maybeMaterialAnalysisResult.(*[]*MaterialAnalysisResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMaterialAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMaterialAnalysisResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &materialAnalysisResultR{}
		}
		if !queries.IsNil(object.LectureID) {
			args[object.LectureID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &materialAnalysisResultR{}
			}

			if !queries.IsNil(obj.LectureID) {
				args[obj.LectureID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ai_lectures`),
		qm.WhereIn(`ai_lectures.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AiLecture")
	}

	var resultSlice []*AiLecture
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AiLecture")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ai_lectures")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ai_lectures")
	}

	if len(aiLectureAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Lecture = foreign
		if foreign.R == nil {
			foreign.R = &aiLectureR{}
		}
		foreign.R.LectureMaterialAnalysisResults = append(foreign.R.LectureMaterialAnalysisResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LectureID, foreign.ID) {
				local.R.Lecture = foreign
				if foreign.R == nil {
					foreign.R = &aiLectureR{}
				}
				foreign.R.LectureMaterialAnalysisResults = append(foreign.R.LectureMaterialAnalysisResults, local)
				break
			}
		}
	}

	return nil
}

// SetAirplaneModel of the materialAnalysisResult to the related item.
// Sets o.R.AirplaneModel to related.
// Adds o to related.R.MaterialAnalysisResults.
func (o *MaterialAnalysisResult) SetAirplaneModel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AirplaneModel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"material_analysis_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"airplane_model_id"}),
		strmangle.WhereClause("\"", "\"", 2, materialAnalysisResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AirplaneModelID, related.ID)
	if o.R == nil {
		o.R = &materialAnalysisResultR{
			AirplaneModel: related,
		}
	} else {
		o.R.AirplaneModel = related
	}

	if related.R == nil {
		related.R = &airplaneModelR{
			MaterialAnalysisResults: MaterialAnalysisResultSlice{o},
		}
	} else {
		related.R.MaterialAnalysisResults = append(related.R.MaterialAnalysisResults, o)
	}

	return nil
}

// RemoveAirplaneModel relationship.
// Sets o.R.AirplaneModel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MaterialAnalysisResult) RemoveAirplaneModel(ctx context.Context, exec boil.ContextExecutor, related *AirplaneModel) error {
	var err error

	queries.SetScanner(&o.AirplaneModelID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("airplane_model_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AirplaneModel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MaterialAnalysisResults {
		if queries.Equal(o.AirplaneModelID, ri.AirplaneModelID) {
			continue
		}

		ln := len(related.R.MaterialAnalysisResults)
		if ln > 1 && i < ln-1 {
			related.R.MaterialAnalysisResults[i] = related.R.MaterialAnalysisResults[ln-1]
		}
		related.R.MaterialAnalysisResults = related.R.MaterialAnalysisResults[:ln-1]
		break
	}
	return nil
}

// SetLab of the materialAnalysisResult to the related item.
// Sets o.R.Lab to related.
// Adds o to related.R.MaterialAnalysisResults.
func (o *MaterialAnalysisResult) SetLab(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Lab) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"material_analysis_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lab_id"}),
		strmangle.WhereClause("\"", "\"", 2, materialAnalysisResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LabID, related.ID)
	if o.R == nil {
		o.R = &materialAnalysisResultR{
			Lab: related,
		}
	} else {
		o.R.Lab = related
	}

	if related.R == nil {
		related.R = &labR{
			MaterialAnalysisResults: MaterialAnalysisResultSlice{o},
		}
	} else {
		related.R.MaterialAnalysisResults = append(related.R.MaterialAnalysisResults, o)
	}

	return nil
}

// RemoveLab relationship.
// Sets o.R.Lab to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MaterialAnalysisResult) RemoveLab(ctx context.Context, exec boil.ContextExecutor, related *Lab) error {
	var err error

	queries.SetScanner(&o.LabID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("lab_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Lab = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MaterialAnalysisResults {
		if queries.Equal(o.LabID, ri.LabID) {
			continue
		}

		ln := len(related.R.MaterialAnalysisResults)
		if ln > 1 && i < ln-1 {
			related.R.MaterialAnalysisResults[i] = related.R.MaterialAnalysisResults[ln-1]
		}
		related.R.MaterialAnalysisResults = related.R.MaterialAnalysisResults[:ln-1]
		break
	}
	return nil
}

// SetLecture of the materialAnalysisResult to the related item.
// Sets o.R.Lecture to related.
// Adds o to related.R.LectureMaterialAnalysisResults.
func (o *MaterialAnalysisResult) SetLecture(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AiLecture) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"material_analysis_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lecture_id"}),
		strmangle.WhereClause("\"", "\"", 2, materialAnalysisResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LectureID, related.ID)
	if o.R == nil {
		o.R = &materialAnalysisResultR{
			Lecture: related,
		}
	} else {
		o.R.Lecture = related
	}

	if related.R == nil {
		related.R = &aiLectureR{
			LectureMaterialAnalysisResults: MaterialAnalysisResultSlice{o},
		}
	} else {
		related.R.LectureMaterialAnalysisResults = append(related.R.LectureMaterialAnalysisResults, o)
	}

	return nil
}

// RemoveLecture relationship.
// Sets o.R.Lecture to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MaterialAnalysisResult) RemoveLecture(ctx context.Context, exec boil.ContextExecutor, related *AiLecture) error {
	var err error

	queries.SetScanner(&o.LectureID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("lecture_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Lecture = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LectureMaterialAnalysisResults {
		if queries.Equal(o.LectureID, ri.LectureID) {
			continue
		}

		ln := len(related.R.LectureMaterialAnalysisResults)
		if ln > 1 && i < ln-1 {
			related.R.LectureMaterialAnalysisResults[i] = related.R.LectureMaterialAnalysisResults[ln-1]
		}
		related.R.LectureMaterialAnalysisResults = related.R.LectureMaterialAnalysisResults[:ln-1]
		break
	}
	return nil
}

// MaterialAnalysisResults retrieves all the records using an executor.
func MaterialAnalysisResults(mods ...qm.QueryMod) materialAnalysisResultQuery {
	mods = append(mods, qm.From("\"material_analysis_results\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"material_analysis_results\".*"})
	}

	return materialAnalysisResultQuery{q}
}

// FindMaterialAnalysisResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMaterialAnalysisResult(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MaterialAnalysisResult, error) {
	materialAnalysisResultObj := &MaterialAnalysisResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"material_analysis_results\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, materialAnalysisResultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from material_analysis_results")
	}

	if err = materialAnalysisResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return materialAnalysisResultObj, err
	}

	return materialAnalysisResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MaterialAnalysisResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no material_analysis_results provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(materialAnalysisResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	materialAnalysisResultInsertCacheMut.RLock()
	cache, cached := materialAnalysisResultInsertCache[key]
	materialAnalysisResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			materialAnalysisResultAllColumns,
			materialAnalysisResultColumnsWithDefault,
			materialAnalysisResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(materialAnalysisResultType, materialAnalysisResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(materialAnalysisResultType, materialAnalysisResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"material_analysis_results\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"material_analysis_results\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into material_analysis_results")
	}

	if !cached {
		materialAnalysisResultInsertCacheMut.Lock()
		materialAnalysisResultInsertCache[key] = cache
		materialAnalysisResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MaterialAnalysisResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MaterialAnalysisResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	materialAnalysisResultUpdateCacheMut.RLock()
	cache, cached := materialAnalysisResultUpdateCache[key]
	materialAnalysisResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			materialAnalysisResultAllColumns,
			materialAnalysisResultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update material_analysis_results, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"material_analysis_results\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, materialAnalysisResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(materialAnalysisResultType, materialAnalysisResultMapping, append(wl, materialAnalysisResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update material_analysis_results row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for material_analysis_results")
	}

	if !cached {
		materialAnalysisResultUpdateCacheMut.Lock()
		materialAnalysisResultUpdateCache[key] = cache
		materialAnalysisResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q materialAnalysisResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for material_analysis_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for material_analysis_results")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MaterialAnalysisResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), materialAnalysisResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"material_analysis_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, materialAnalysisResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in materialAnalysisResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all materialAnalysisResult")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MaterialAnalysisResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no material_analysis_results provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(materialAnalysisResultColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	materialAnalysisResultUpsertCacheMut.RLock()
	cache, cached := materialAnalysisResultUpsertCache[key]
	materialAnalysisResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			materialAnalysisResultAllColumns,
			materialAnalysisResultColumnsWithDefault,
			materialAnalysisResultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			materialAnalysisResultAllColumns,
			materialAnalysisResultPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert material_analysis_results, could not build update column list")
		}

		ret := strmangle.SetComplement(materialAnalysisResultAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(materialAnalysisResultPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert material_analysis_results, could not build conflict column list")
			}

			conflict = make([]string, len(materialAnalysisResultPrimaryKeyColumns))
			copy(conflict, materialAnalysisResultPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"material_analysis_results\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(materialAnalysisResultType, materialAnalysisResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(materialAnalysisResultType, materialAnalysisResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert material_analysis_results")
	}

	if !cached {
		materialAnalysisResultUpsertCacheMut.Lock()
		materialAnalysisResultUpsertCache[key] = cache
		materialAnalysisResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MaterialAnalysisResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MaterialAnalysisResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no MaterialAnalysisResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), materialAnalysisResultPrimaryKeyMapping)
	sql := "DELETE FROM \"material_analysis_results\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from material_analysis_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for material_analysis_results")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q materialAnalysisResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no materialAnalysisResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from material_analysis_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for material_analysis_results")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MaterialAnalysisResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(materialAnalysisResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), materialAnalysisResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"material_analysis_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, materialAnalysisResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from materialAnalysisResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for material_analysis_results")
	}

	if len(materialAnalysisResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MaterialAnalysisResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMaterialAnalysisResult(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MaterialAnalysisResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MaterialAnalysisResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), materialAnalysisResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"material_analysis_results\".* FROM \"material_analysis_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, materialAnalysisResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in MaterialAnalysisResultSlice")
	}

	*o = slice

	return nil
}

// MaterialAnalysisResultExists checks if the MaterialAnalysisResult row exists.
func MaterialAnalysisResultExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"material_analysis_results\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if material_analysis_results exists")
	}

	return exists, nil
}

// Exists checks if the MaterialAnalysisResult row exists.
func (o *MaterialAnalysisResult) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MaterialAnalysisResultExists(ctx, exec, o.ID)
}
