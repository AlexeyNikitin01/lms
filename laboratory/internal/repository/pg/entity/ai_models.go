// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AiModel is an object representing the database table.
type AiModel struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Version     string      `boil:"version" json:"version" toml:"version" yaml:"version"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Path        string      `boil:"path" json:"path" toml:"path" yaml:"path"`
	IsActive    bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *aiModelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aiModelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AiModelColumns = struct {
	ID          string
	Name        string
	Version     string
	Description string
	Path        string
	IsActive    string
	CreatedAt   string
}{
	ID:          "id",
	Name:        "name",
	Version:     "version",
	Description: "description",
	Path:        "path",
	IsActive:    "is_active",
	CreatedAt:   "created_at",
}

var AiModelTableColumns = struct {
	ID          string
	Name        string
	Version     string
	Description string
	Path        string
	IsActive    string
	CreatedAt   string
}{
	ID:          "ai_models.id",
	Name:        "ai_models.name",
	Version:     "ai_models.version",
	Description: "ai_models.description",
	Path:        "ai_models.path",
	IsActive:    "ai_models.is_active",
	CreatedAt:   "ai_models.created_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var AiModelWhere = struct {
	ID          whereHelperint
	Name        whereHelperstring
	Version     whereHelperstring
	Description whereHelpernull_String
	Path        whereHelperstring
	IsActive    whereHelperbool
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "\"ai_models\".\"id\""},
	Name:        whereHelperstring{field: "\"ai_models\".\"name\""},
	Version:     whereHelperstring{field: "\"ai_models\".\"version\""},
	Description: whereHelpernull_String{field: "\"ai_models\".\"description\""},
	Path:        whereHelperstring{field: "\"ai_models\".\"path\""},
	IsActive:    whereHelperbool{field: "\"ai_models\".\"is_active\""},
	CreatedAt:   whereHelpertime_Time{field: "\"ai_models\".\"created_at\""},
}

// AiModelRels is where relationship names are stored.
var AiModelRels = struct {
}{}

// aiModelR is where relationships are stored.
type aiModelR struct {
}

// NewStruct creates a new relationship struct
func (*aiModelR) NewStruct() *aiModelR {
	return &aiModelR{}
}

// aiModelL is where Load methods for each relationship are stored.
type aiModelL struct{}

var (
	aiModelAllColumns            = []string{"id", "name", "version", "description", "path", "is_active", "created_at"}
	aiModelColumnsWithoutDefault = []string{"name", "version", "path"}
	aiModelColumnsWithDefault    = []string{"id", "description", "is_active", "created_at"}
	aiModelPrimaryKeyColumns     = []string{"id"}
	aiModelGeneratedColumns      = []string{}
)

type (
	// AiModelSlice is an alias for a slice of pointers to AiModel.
	// This should almost always be used instead of []AiModel.
	AiModelSlice []*AiModel
	// AiModelHook is the signature for custom AiModel hook methods
	AiModelHook func(context.Context, boil.ContextExecutor, *AiModel) error

	aiModelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aiModelType                 = reflect.TypeOf(&AiModel{})
	aiModelMapping              = queries.MakeStructMapping(aiModelType)
	aiModelPrimaryKeyMapping, _ = queries.BindMapping(aiModelType, aiModelMapping, aiModelPrimaryKeyColumns)
	aiModelInsertCacheMut       sync.RWMutex
	aiModelInsertCache          = make(map[string]insertCache)
	aiModelUpdateCacheMut       sync.RWMutex
	aiModelUpdateCache          = make(map[string]updateCache)
	aiModelUpsertCacheMut       sync.RWMutex
	aiModelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aiModelAfterSelectMu sync.Mutex
var aiModelAfterSelectHooks []AiModelHook

var aiModelBeforeInsertMu sync.Mutex
var aiModelBeforeInsertHooks []AiModelHook
var aiModelAfterInsertMu sync.Mutex
var aiModelAfterInsertHooks []AiModelHook

var aiModelBeforeUpdateMu sync.Mutex
var aiModelBeforeUpdateHooks []AiModelHook
var aiModelAfterUpdateMu sync.Mutex
var aiModelAfterUpdateHooks []AiModelHook

var aiModelBeforeDeleteMu sync.Mutex
var aiModelBeforeDeleteHooks []AiModelHook
var aiModelAfterDeleteMu sync.Mutex
var aiModelAfterDeleteHooks []AiModelHook

var aiModelBeforeUpsertMu sync.Mutex
var aiModelBeforeUpsertHooks []AiModelHook
var aiModelAfterUpsertMu sync.Mutex
var aiModelAfterUpsertHooks []AiModelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AiModel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiModelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AiModel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiModelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AiModel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiModelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AiModel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiModelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AiModel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiModelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AiModel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiModelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AiModel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiModelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AiModel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiModelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AiModel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiModelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAiModelHook registers your hook function for all future operations.
func AddAiModelHook(hookPoint boil.HookPoint, aiModelHook AiModelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		aiModelAfterSelectMu.Lock()
		aiModelAfterSelectHooks = append(aiModelAfterSelectHooks, aiModelHook)
		aiModelAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		aiModelBeforeInsertMu.Lock()
		aiModelBeforeInsertHooks = append(aiModelBeforeInsertHooks, aiModelHook)
		aiModelBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		aiModelAfterInsertMu.Lock()
		aiModelAfterInsertHooks = append(aiModelAfterInsertHooks, aiModelHook)
		aiModelAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		aiModelBeforeUpdateMu.Lock()
		aiModelBeforeUpdateHooks = append(aiModelBeforeUpdateHooks, aiModelHook)
		aiModelBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		aiModelAfterUpdateMu.Lock()
		aiModelAfterUpdateHooks = append(aiModelAfterUpdateHooks, aiModelHook)
		aiModelAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		aiModelBeforeDeleteMu.Lock()
		aiModelBeforeDeleteHooks = append(aiModelBeforeDeleteHooks, aiModelHook)
		aiModelBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		aiModelAfterDeleteMu.Lock()
		aiModelAfterDeleteHooks = append(aiModelAfterDeleteHooks, aiModelHook)
		aiModelAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		aiModelBeforeUpsertMu.Lock()
		aiModelBeforeUpsertHooks = append(aiModelBeforeUpsertHooks, aiModelHook)
		aiModelBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		aiModelAfterUpsertMu.Lock()
		aiModelAfterUpsertHooks = append(aiModelAfterUpsertHooks, aiModelHook)
		aiModelAfterUpsertMu.Unlock()
	}
}

// One returns a single aiModel record from the query.
func (q aiModelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AiModel, error) {
	o := &AiModel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for ai_models")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AiModel records from the query.
func (q aiModelQuery) All(ctx context.Context, exec boil.ContextExecutor) (AiModelSlice, error) {
	var o []*AiModel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to AiModel slice")
	}

	if len(aiModelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AiModel records in the query.
func (q aiModelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count ai_models rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aiModelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if ai_models exists")
	}

	return count > 0, nil
}

// AiModels retrieves all the records using an executor.
func AiModels(mods ...qm.QueryMod) aiModelQuery {
	mods = append(mods, qm.From("\"ai_models\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ai_models\".*"})
	}

	return aiModelQuery{q}
}

// FindAiModel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAiModel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AiModel, error) {
	aiModelObj := &AiModel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ai_models\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, aiModelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from ai_models")
	}

	if err = aiModelObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aiModelObj, err
	}

	return aiModelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AiModel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no ai_models provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aiModelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aiModelInsertCacheMut.RLock()
	cache, cached := aiModelInsertCache[key]
	aiModelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aiModelAllColumns,
			aiModelColumnsWithDefault,
			aiModelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aiModelType, aiModelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aiModelType, aiModelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ai_models\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ai_models\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into ai_models")
	}

	if !cached {
		aiModelInsertCacheMut.Lock()
		aiModelInsertCache[key] = cache
		aiModelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AiModel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AiModel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aiModelUpdateCacheMut.RLock()
	cache, cached := aiModelUpdateCache[key]
	aiModelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aiModelAllColumns,
			aiModelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update ai_models, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ai_models\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, aiModelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aiModelType, aiModelMapping, append(wl, aiModelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update ai_models row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for ai_models")
	}

	if !cached {
		aiModelUpdateCacheMut.Lock()
		aiModelUpdateCache[key] = cache
		aiModelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aiModelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for ai_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for ai_models")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AiModelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aiModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ai_models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aiModelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in aiModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all aiModel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AiModel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no ai_models provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aiModelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aiModelUpsertCacheMut.RLock()
	cache, cached := aiModelUpsertCache[key]
	aiModelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			aiModelAllColumns,
			aiModelColumnsWithDefault,
			aiModelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			aiModelAllColumns,
			aiModelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert ai_models, could not build update column list")
		}

		ret := strmangle.SetComplement(aiModelAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(aiModelPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert ai_models, could not build conflict column list")
			}

			conflict = make([]string, len(aiModelPrimaryKeyColumns))
			copy(conflict, aiModelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ai_models\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(aiModelType, aiModelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aiModelType, aiModelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert ai_models")
	}

	if !cached {
		aiModelUpsertCacheMut.Lock()
		aiModelUpsertCache[key] = cache
		aiModelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AiModel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AiModel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no AiModel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aiModelPrimaryKeyMapping)
	sql := "DELETE FROM \"ai_models\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from ai_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for ai_models")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aiModelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no aiModelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from ai_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for ai_models")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AiModelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aiModelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aiModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ai_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aiModelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from aiModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for ai_models")
	}

	if len(aiModelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AiModel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAiModel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AiModelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AiModelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aiModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ai_models\".* FROM \"ai_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aiModelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in AiModelSlice")
	}

	*o = slice

	return nil
}

// AiModelExists checks if the AiModel row exists.
func AiModelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ai_models\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if ai_models exists")
	}

	return exists, nil
}

// Exists checks if the AiModel row exists.
func (o *AiModel) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AiModelExists(ctx, exec, o.ID)
}
