// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AnalysisResult is an object representing the database table.
type AnalysisResult struct {
	ID              int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	LectureID       null.Int     `boil:"lecture_id" json:"lecture_id,omitempty" toml:"lecture_id" yaml:"lecture_id,omitempty"`
	ImagePath       string       `boil:"image_path" json:"image_path" toml:"image_path" yaml:"image_path"`
	AnalysisDate    null.Time    `boil:"analysis_date" json:"analysis_date,omitempty" toml:"analysis_date" yaml:"analysis_date,omitempty"`
	ConfidenceScore null.Float64 `boil:"confidence_score" json:"confidence_score,omitempty" toml:"confidence_score" yaml:"confidence_score,omitempty"`

	R *analysisResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L analysisResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AnalysisResultColumns = struct {
	ID              string
	LectureID       string
	ImagePath       string
	AnalysisDate    string
	ConfidenceScore string
}{
	ID:              "id",
	LectureID:       "lecture_id",
	ImagePath:       "image_path",
	AnalysisDate:    "analysis_date",
	ConfidenceScore: "confidence_score",
}

var AnalysisResultTableColumns = struct {
	ID              string
	LectureID       string
	ImagePath       string
	AnalysisDate    string
	ConfidenceScore string
}{
	ID:              "analysis_results.id",
	LectureID:       "analysis_results.lecture_id",
	ImagePath:       "analysis_results.image_path",
	AnalysisDate:    "analysis_results.analysis_date",
	ConfidenceScore: "analysis_results.confidence_score",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AnalysisResultWhere = struct {
	ID              whereHelperint
	LectureID       whereHelpernull_Int
	ImagePath       whereHelperstring
	AnalysisDate    whereHelpernull_Time
	ConfidenceScore whereHelpernull_Float64
}{
	ID:              whereHelperint{field: "\"analysis_results\".\"id\""},
	LectureID:       whereHelpernull_Int{field: "\"analysis_results\".\"lecture_id\""},
	ImagePath:       whereHelperstring{field: "\"analysis_results\".\"image_path\""},
	AnalysisDate:    whereHelpernull_Time{field: "\"analysis_results\".\"analysis_date\""},
	ConfidenceScore: whereHelpernull_Float64{field: "\"analysis_results\".\"confidence_score\""},
}

// AnalysisResultRels is where relationship names are stored.
var AnalysisResultRels = struct {
	Lecture                 string
	AnalysisDefectFindings  string
	AnalysisRecommendations string
}{
	Lecture:                 "Lecture",
	AnalysisDefectFindings:  "AnalysisDefectFindings",
	AnalysisRecommendations: "AnalysisRecommendations",
}

// analysisResultR is where relationships are stored.
type analysisResultR struct {
	Lecture                 *LecturesAi         `boil:"Lecture" json:"Lecture" toml:"Lecture" yaml:"Lecture"`
	AnalysisDefectFindings  DefectFindingSlice  `boil:"AnalysisDefectFindings" json:"AnalysisDefectFindings" toml:"AnalysisDefectFindings" yaml:"AnalysisDefectFindings"`
	AnalysisRecommendations RecommendationSlice `boil:"AnalysisRecommendations" json:"AnalysisRecommendations" toml:"AnalysisRecommendations" yaml:"AnalysisRecommendations"`
}

// NewStruct creates a new relationship struct
func (*analysisResultR) NewStruct() *analysisResultR {
	return &analysisResultR{}
}

func (r *analysisResultR) GetLecture() *LecturesAi {
	if r == nil {
		return nil
	}
	return r.Lecture
}

func (r *analysisResultR) GetAnalysisDefectFindings() DefectFindingSlice {
	if r == nil {
		return nil
	}
	return r.AnalysisDefectFindings
}

func (r *analysisResultR) GetAnalysisRecommendations() RecommendationSlice {
	if r == nil {
		return nil
	}
	return r.AnalysisRecommendations
}

// analysisResultL is where Load methods for each relationship are stored.
type analysisResultL struct{}

var (
	analysisResultAllColumns            = []string{"id", "lecture_id", "image_path", "analysis_date", "confidence_score"}
	analysisResultColumnsWithoutDefault = []string{"image_path"}
	analysisResultColumnsWithDefault    = []string{"id", "lecture_id", "analysis_date", "confidence_score"}
	analysisResultPrimaryKeyColumns     = []string{"id"}
	analysisResultGeneratedColumns      = []string{}
)

type (
	// AnalysisResultSlice is an alias for a slice of pointers to AnalysisResult.
	// This should almost always be used instead of []AnalysisResult.
	AnalysisResultSlice []*AnalysisResult
	// AnalysisResultHook is the signature for custom AnalysisResult hook methods
	AnalysisResultHook func(context.Context, boil.ContextExecutor, *AnalysisResult) error

	analysisResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	analysisResultType                 = reflect.TypeOf(&AnalysisResult{})
	analysisResultMapping              = queries.MakeStructMapping(analysisResultType)
	analysisResultPrimaryKeyMapping, _ = queries.BindMapping(analysisResultType, analysisResultMapping, analysisResultPrimaryKeyColumns)
	analysisResultInsertCacheMut       sync.RWMutex
	analysisResultInsertCache          = make(map[string]insertCache)
	analysisResultUpdateCacheMut       sync.RWMutex
	analysisResultUpdateCache          = make(map[string]updateCache)
	analysisResultUpsertCacheMut       sync.RWMutex
	analysisResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var analysisResultAfterSelectMu sync.Mutex
var analysisResultAfterSelectHooks []AnalysisResultHook

var analysisResultBeforeInsertMu sync.Mutex
var analysisResultBeforeInsertHooks []AnalysisResultHook
var analysisResultAfterInsertMu sync.Mutex
var analysisResultAfterInsertHooks []AnalysisResultHook

var analysisResultBeforeUpdateMu sync.Mutex
var analysisResultBeforeUpdateHooks []AnalysisResultHook
var analysisResultAfterUpdateMu sync.Mutex
var analysisResultAfterUpdateHooks []AnalysisResultHook

var analysisResultBeforeDeleteMu sync.Mutex
var analysisResultBeforeDeleteHooks []AnalysisResultHook
var analysisResultAfterDeleteMu sync.Mutex
var analysisResultAfterDeleteHooks []AnalysisResultHook

var analysisResultBeforeUpsertMu sync.Mutex
var analysisResultBeforeUpsertHooks []AnalysisResultHook
var analysisResultAfterUpsertMu sync.Mutex
var analysisResultAfterUpsertHooks []AnalysisResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AnalysisResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range analysisResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AnalysisResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range analysisResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AnalysisResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range analysisResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AnalysisResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range analysisResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AnalysisResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range analysisResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AnalysisResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range analysisResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AnalysisResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range analysisResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AnalysisResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range analysisResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AnalysisResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range analysisResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAnalysisResultHook registers your hook function for all future operations.
func AddAnalysisResultHook(hookPoint boil.HookPoint, analysisResultHook AnalysisResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		analysisResultAfterSelectMu.Lock()
		analysisResultAfterSelectHooks = append(analysisResultAfterSelectHooks, analysisResultHook)
		analysisResultAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		analysisResultBeforeInsertMu.Lock()
		analysisResultBeforeInsertHooks = append(analysisResultBeforeInsertHooks, analysisResultHook)
		analysisResultBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		analysisResultAfterInsertMu.Lock()
		analysisResultAfterInsertHooks = append(analysisResultAfterInsertHooks, analysisResultHook)
		analysisResultAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		analysisResultBeforeUpdateMu.Lock()
		analysisResultBeforeUpdateHooks = append(analysisResultBeforeUpdateHooks, analysisResultHook)
		analysisResultBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		analysisResultAfterUpdateMu.Lock()
		analysisResultAfterUpdateHooks = append(analysisResultAfterUpdateHooks, analysisResultHook)
		analysisResultAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		analysisResultBeforeDeleteMu.Lock()
		analysisResultBeforeDeleteHooks = append(analysisResultBeforeDeleteHooks, analysisResultHook)
		analysisResultBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		analysisResultAfterDeleteMu.Lock()
		analysisResultAfterDeleteHooks = append(analysisResultAfterDeleteHooks, analysisResultHook)
		analysisResultAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		analysisResultBeforeUpsertMu.Lock()
		analysisResultBeforeUpsertHooks = append(analysisResultBeforeUpsertHooks, analysisResultHook)
		analysisResultBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		analysisResultAfterUpsertMu.Lock()
		analysisResultAfterUpsertHooks = append(analysisResultAfterUpsertHooks, analysisResultHook)
		analysisResultAfterUpsertMu.Unlock()
	}
}

// One returns a single analysisResult record from the query.
func (q analysisResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AnalysisResult, error) {
	o := &AnalysisResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for analysis_results")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AnalysisResult records from the query.
func (q analysisResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (AnalysisResultSlice, error) {
	var o []*AnalysisResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to AnalysisResult slice")
	}

	if len(analysisResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AnalysisResult records in the query.
func (q analysisResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count analysis_results rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q analysisResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if analysis_results exists")
	}

	return count > 0, nil
}

// Lecture pointed to by the foreign key.
func (o *AnalysisResult) Lecture(mods ...qm.QueryMod) lecturesAiQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LectureID),
	}

	queryMods = append(queryMods, mods...)

	return LecturesAis(queryMods...)
}

// AnalysisDefectFindings retrieves all the defect_finding's DefectFindings with an executor via analysis_id column.
func (o *AnalysisResult) AnalysisDefectFindings(mods ...qm.QueryMod) defectFindingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"defect_findings\".\"analysis_id\"=?", o.ID),
	)

	return DefectFindings(queryMods...)
}

// AnalysisRecommendations retrieves all the recommendation's Recommendations with an executor via analysis_id column.
func (o *AnalysisResult) AnalysisRecommendations(mods ...qm.QueryMod) recommendationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recommendations\".\"analysis_id\"=?", o.ID),
	)

	return Recommendations(queryMods...)
}

// LoadLecture allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (analysisResultL) LoadLecture(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnalysisResult interface{}, mods queries.Applicator) error {
	var slice []*AnalysisResult
	var object *AnalysisResult

	if singular {
		var ok bool
		object, ok = maybeAnalysisResult.(*AnalysisResult)
		if !ok {
			object = new(AnalysisResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAnalysisResult))
			}
		}
	} else {
		s, ok := maybeAnalysisResult.(*[]*AnalysisResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAnalysisResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &analysisResultR{}
		}
		if !queries.IsNil(object.LectureID) {
			args[object.LectureID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &analysisResultR{}
			}

			if !queries.IsNil(obj.LectureID) {
				args[obj.LectureID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`lectures_ai`),
		qm.WhereIn(`lectures_ai.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LecturesAi")
	}

	var resultSlice []*LecturesAi
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LecturesAi")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for lectures_ai")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lectures_ai")
	}

	if len(lecturesAiAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Lecture = foreign
		if foreign.R == nil {
			foreign.R = &lecturesAiR{}
		}
		foreign.R.LectureAnalysisResults = append(foreign.R.LectureAnalysisResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LectureID, foreign.ID) {
				local.R.Lecture = foreign
				if foreign.R == nil {
					foreign.R = &lecturesAiR{}
				}
				foreign.R.LectureAnalysisResults = append(foreign.R.LectureAnalysisResults, local)
				break
			}
		}
	}

	return nil
}

// LoadAnalysisDefectFindings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (analysisResultL) LoadAnalysisDefectFindings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnalysisResult interface{}, mods queries.Applicator) error {
	var slice []*AnalysisResult
	var object *AnalysisResult

	if singular {
		var ok bool
		object, ok = maybeAnalysisResult.(*AnalysisResult)
		if !ok {
			object = new(AnalysisResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAnalysisResult))
			}
		}
	} else {
		s, ok := maybeAnalysisResult.(*[]*AnalysisResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAnalysisResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &analysisResultR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &analysisResultR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`defect_findings`),
		qm.WhereIn(`defect_findings.analysis_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load defect_findings")
	}

	var resultSlice []*DefectFinding
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice defect_findings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on defect_findings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for defect_findings")
	}

	if len(defectFindingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AnalysisDefectFindings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &defectFindingR{}
			}
			foreign.R.Analysis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AnalysisID {
				local.R.AnalysisDefectFindings = append(local.R.AnalysisDefectFindings, foreign)
				if foreign.R == nil {
					foreign.R = &defectFindingR{}
				}
				foreign.R.Analysis = local
				break
			}
		}
	}

	return nil
}

// LoadAnalysisRecommendations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (analysisResultL) LoadAnalysisRecommendations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnalysisResult interface{}, mods queries.Applicator) error {
	var slice []*AnalysisResult
	var object *AnalysisResult

	if singular {
		var ok bool
		object, ok = maybeAnalysisResult.(*AnalysisResult)
		if !ok {
			object = new(AnalysisResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAnalysisResult))
			}
		}
	} else {
		s, ok := maybeAnalysisResult.(*[]*AnalysisResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAnalysisResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAnalysisResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &analysisResultR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &analysisResultR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`recommendations`),
		qm.WhereIn(`recommendations.analysis_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recommendations")
	}

	var resultSlice []*Recommendation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recommendations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recommendations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recommendations")
	}

	if len(recommendationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AnalysisRecommendations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recommendationR{}
			}
			foreign.R.Analysis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AnalysisID {
				local.R.AnalysisRecommendations = append(local.R.AnalysisRecommendations, foreign)
				if foreign.R == nil {
					foreign.R = &recommendationR{}
				}
				foreign.R.Analysis = local
				break
			}
		}
	}

	return nil
}

// SetLecture of the analysisResult to the related item.
// Sets o.R.Lecture to related.
// Adds o to related.R.LectureAnalysisResults.
func (o *AnalysisResult) SetLecture(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LecturesAi) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"analysis_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lecture_id"}),
		strmangle.WhereClause("\"", "\"", 2, analysisResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LectureID, related.ID)
	if o.R == nil {
		o.R = &analysisResultR{
			Lecture: related,
		}
	} else {
		o.R.Lecture = related
	}

	if related.R == nil {
		related.R = &lecturesAiR{
			LectureAnalysisResults: AnalysisResultSlice{o},
		}
	} else {
		related.R.LectureAnalysisResults = append(related.R.LectureAnalysisResults, o)
	}

	return nil
}

// RemoveLecture relationship.
// Sets o.R.Lecture to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AnalysisResult) RemoveLecture(ctx context.Context, exec boil.ContextExecutor, related *LecturesAi) error {
	var err error

	queries.SetScanner(&o.LectureID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("lecture_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Lecture = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LectureAnalysisResults {
		if queries.Equal(o.LectureID, ri.LectureID) {
			continue
		}

		ln := len(related.R.LectureAnalysisResults)
		if ln > 1 && i < ln-1 {
			related.R.LectureAnalysisResults[i] = related.R.LectureAnalysisResults[ln-1]
		}
		related.R.LectureAnalysisResults = related.R.LectureAnalysisResults[:ln-1]
		break
	}
	return nil
}

// AddAnalysisDefectFindings adds the given related objects to the existing relationships
// of the analysis_result, optionally inserting them as new records.
// Appends related to o.R.AnalysisDefectFindings.
// Sets related.R.Analysis appropriately.
func (o *AnalysisResult) AddAnalysisDefectFindings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DefectFinding) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AnalysisID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"defect_findings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"analysis_id"}),
				strmangle.WhereClause("\"", "\"", 2, defectFindingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.AnalysisID, rel.DefectTypeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AnalysisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &analysisResultR{
			AnalysisDefectFindings: related,
		}
	} else {
		o.R.AnalysisDefectFindings = append(o.R.AnalysisDefectFindings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &defectFindingR{
				Analysis: o,
			}
		} else {
			rel.R.Analysis = o
		}
	}
	return nil
}

// AddAnalysisRecommendations adds the given related objects to the existing relationships
// of the analysis_result, optionally inserting them as new records.
// Appends related to o.R.AnalysisRecommendations.
// Sets related.R.Analysis appropriately.
func (o *AnalysisResult) AddAnalysisRecommendations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Recommendation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AnalysisID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recommendations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"analysis_id"}),
				strmangle.WhereClause("\"", "\"", 2, recommendationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AnalysisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &analysisResultR{
			AnalysisRecommendations: related,
		}
	} else {
		o.R.AnalysisRecommendations = append(o.R.AnalysisRecommendations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recommendationR{
				Analysis: o,
			}
		} else {
			rel.R.Analysis = o
		}
	}
	return nil
}

// AnalysisResults retrieves all the records using an executor.
func AnalysisResults(mods ...qm.QueryMod) analysisResultQuery {
	mods = append(mods, qm.From("\"analysis_results\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"analysis_results\".*"})
	}

	return analysisResultQuery{q}
}

// FindAnalysisResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAnalysisResult(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AnalysisResult, error) {
	analysisResultObj := &AnalysisResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"analysis_results\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, analysisResultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from analysis_results")
	}

	if err = analysisResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return analysisResultObj, err
	}

	return analysisResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AnalysisResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no analysis_results provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(analysisResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	analysisResultInsertCacheMut.RLock()
	cache, cached := analysisResultInsertCache[key]
	analysisResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			analysisResultAllColumns,
			analysisResultColumnsWithDefault,
			analysisResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(analysisResultType, analysisResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(analysisResultType, analysisResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"analysis_results\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"analysis_results\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into analysis_results")
	}

	if !cached {
		analysisResultInsertCacheMut.Lock()
		analysisResultInsertCache[key] = cache
		analysisResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AnalysisResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AnalysisResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	analysisResultUpdateCacheMut.RLock()
	cache, cached := analysisResultUpdateCache[key]
	analysisResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			analysisResultAllColumns,
			analysisResultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update analysis_results, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"analysis_results\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, analysisResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(analysisResultType, analysisResultMapping, append(wl, analysisResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update analysis_results row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for analysis_results")
	}

	if !cached {
		analysisResultUpdateCacheMut.Lock()
		analysisResultUpdateCache[key] = cache
		analysisResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q analysisResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for analysis_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for analysis_results")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AnalysisResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analysisResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"analysis_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, analysisResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in analysisResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all analysisResult")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AnalysisResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no analysis_results provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(analysisResultColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	analysisResultUpsertCacheMut.RLock()
	cache, cached := analysisResultUpsertCache[key]
	analysisResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			analysisResultAllColumns,
			analysisResultColumnsWithDefault,
			analysisResultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			analysisResultAllColumns,
			analysisResultPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert analysis_results, could not build update column list")
		}

		ret := strmangle.SetComplement(analysisResultAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(analysisResultPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert analysis_results, could not build conflict column list")
			}

			conflict = make([]string, len(analysisResultPrimaryKeyColumns))
			copy(conflict, analysisResultPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"analysis_results\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(analysisResultType, analysisResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(analysisResultType, analysisResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert analysis_results")
	}

	if !cached {
		analysisResultUpsertCacheMut.Lock()
		analysisResultUpsertCache[key] = cache
		analysisResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AnalysisResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AnalysisResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no AnalysisResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), analysisResultPrimaryKeyMapping)
	sql := "DELETE FROM \"analysis_results\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from analysis_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for analysis_results")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q analysisResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no analysisResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from analysis_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for analysis_results")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AnalysisResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(analysisResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analysisResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"analysis_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, analysisResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from analysisResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for analysis_results")
	}

	if len(analysisResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AnalysisResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAnalysisResult(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AnalysisResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AnalysisResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), analysisResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"analysis_results\".* FROM \"analysis_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, analysisResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in AnalysisResultSlice")
	}

	*o = slice

	return nil
}

// AnalysisResultExists checks if the AnalysisResult row exists.
func AnalysisResultExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"analysis_results\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if analysis_results exists")
	}

	return exists, nil
}

// Exists checks if the AnalysisResult row exists.
func (o *AnalysisResult) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AnalysisResultExists(ctx, exec, o.ID)
}
