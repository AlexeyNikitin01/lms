// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AiLecture is an object representing the database table.
type AiLecture struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Content   string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	Author    string    `boil:"author" json:"author" toml:"author" yaml:"author"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *aiLectureR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aiLectureL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AiLectureColumns = struct {
	ID        string
	Title     string
	Content   string
	Author    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Title:     "title",
	Content:   "content",
	Author:    "author",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var AiLectureTableColumns = struct {
	ID        string
	Title     string
	Content   string
	Author    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "ai_lectures.id",
	Title:     "ai_lectures.title",
	Content:   "ai_lectures.content",
	Author:    "ai_lectures.author",
	CreatedAt: "ai_lectures.created_at",
	UpdatedAt: "ai_lectures.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AiLectureWhere = struct {
	ID        whereHelperint
	Title     whereHelperstring
	Content   whereHelperstring
	Author    whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"ai_lectures\".\"id\""},
	Title:     whereHelperstring{field: "\"ai_lectures\".\"title\""},
	Content:   whereHelperstring{field: "\"ai_lectures\".\"content\""},
	Author:    whereHelperstring{field: "\"ai_lectures\".\"author\""},
	CreatedAt: whereHelpertime_Time{field: "\"ai_lectures\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"ai_lectures\".\"updated_at\""},
}

// AiLectureRels is where relationship names are stored.
var AiLectureRels = struct {
	AirplaneMaterials              string
	LectureMaterialAnalysisResults string
}{
	AirplaneMaterials:              "AirplaneMaterials",
	LectureMaterialAnalysisResults: "LectureMaterialAnalysisResults",
}

// aiLectureR is where relationships are stored.
type aiLectureR struct {
	AirplaneMaterials              AirplaneMaterialSlice       `boil:"AirplaneMaterials" json:"AirplaneMaterials" toml:"AirplaneMaterials" yaml:"AirplaneMaterials"`
	LectureMaterialAnalysisResults MaterialAnalysisResultSlice `boil:"LectureMaterialAnalysisResults" json:"LectureMaterialAnalysisResults" toml:"LectureMaterialAnalysisResults" yaml:"LectureMaterialAnalysisResults"`
}

// NewStruct creates a new relationship struct
func (*aiLectureR) NewStruct() *aiLectureR {
	return &aiLectureR{}
}

func (r *aiLectureR) GetAirplaneMaterials() AirplaneMaterialSlice {
	if r == nil {
		return nil
	}
	return r.AirplaneMaterials
}

func (r *aiLectureR) GetLectureMaterialAnalysisResults() MaterialAnalysisResultSlice {
	if r == nil {
		return nil
	}
	return r.LectureMaterialAnalysisResults
}

// aiLectureL is where Load methods for each relationship are stored.
type aiLectureL struct{}

var (
	aiLectureAllColumns            = []string{"id", "title", "content", "author", "created_at", "updated_at"}
	aiLectureColumnsWithoutDefault = []string{"title", "content"}
	aiLectureColumnsWithDefault    = []string{"id", "author", "created_at", "updated_at"}
	aiLecturePrimaryKeyColumns     = []string{"id"}
	aiLectureGeneratedColumns      = []string{}
)

type (
	// AiLectureSlice is an alias for a slice of pointers to AiLecture.
	// This should almost always be used instead of []AiLecture.
	AiLectureSlice []*AiLecture
	// AiLectureHook is the signature for custom AiLecture hook methods
	AiLectureHook func(context.Context, boil.ContextExecutor, *AiLecture) error

	aiLectureQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aiLectureType                 = reflect.TypeOf(&AiLecture{})
	aiLectureMapping              = queries.MakeStructMapping(aiLectureType)
	aiLecturePrimaryKeyMapping, _ = queries.BindMapping(aiLectureType, aiLectureMapping, aiLecturePrimaryKeyColumns)
	aiLectureInsertCacheMut       sync.RWMutex
	aiLectureInsertCache          = make(map[string]insertCache)
	aiLectureUpdateCacheMut       sync.RWMutex
	aiLectureUpdateCache          = make(map[string]updateCache)
	aiLectureUpsertCacheMut       sync.RWMutex
	aiLectureUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aiLectureAfterSelectMu sync.Mutex
var aiLectureAfterSelectHooks []AiLectureHook

var aiLectureBeforeInsertMu sync.Mutex
var aiLectureBeforeInsertHooks []AiLectureHook
var aiLectureAfterInsertMu sync.Mutex
var aiLectureAfterInsertHooks []AiLectureHook

var aiLectureBeforeUpdateMu sync.Mutex
var aiLectureBeforeUpdateHooks []AiLectureHook
var aiLectureAfterUpdateMu sync.Mutex
var aiLectureAfterUpdateHooks []AiLectureHook

var aiLectureBeforeDeleteMu sync.Mutex
var aiLectureBeforeDeleteHooks []AiLectureHook
var aiLectureAfterDeleteMu sync.Mutex
var aiLectureAfterDeleteHooks []AiLectureHook

var aiLectureBeforeUpsertMu sync.Mutex
var aiLectureBeforeUpsertHooks []AiLectureHook
var aiLectureAfterUpsertMu sync.Mutex
var aiLectureAfterUpsertHooks []AiLectureHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AiLecture) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiLectureAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AiLecture) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiLectureBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AiLecture) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiLectureAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AiLecture) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiLectureBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AiLecture) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiLectureAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AiLecture) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiLectureBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AiLecture) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiLectureAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AiLecture) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiLectureBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AiLecture) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aiLectureAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAiLectureHook registers your hook function for all future operations.
func AddAiLectureHook(hookPoint boil.HookPoint, aiLectureHook AiLectureHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		aiLectureAfterSelectMu.Lock()
		aiLectureAfterSelectHooks = append(aiLectureAfterSelectHooks, aiLectureHook)
		aiLectureAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		aiLectureBeforeInsertMu.Lock()
		aiLectureBeforeInsertHooks = append(aiLectureBeforeInsertHooks, aiLectureHook)
		aiLectureBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		aiLectureAfterInsertMu.Lock()
		aiLectureAfterInsertHooks = append(aiLectureAfterInsertHooks, aiLectureHook)
		aiLectureAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		aiLectureBeforeUpdateMu.Lock()
		aiLectureBeforeUpdateHooks = append(aiLectureBeforeUpdateHooks, aiLectureHook)
		aiLectureBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		aiLectureAfterUpdateMu.Lock()
		aiLectureAfterUpdateHooks = append(aiLectureAfterUpdateHooks, aiLectureHook)
		aiLectureAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		aiLectureBeforeDeleteMu.Lock()
		aiLectureBeforeDeleteHooks = append(aiLectureBeforeDeleteHooks, aiLectureHook)
		aiLectureBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		aiLectureAfterDeleteMu.Lock()
		aiLectureAfterDeleteHooks = append(aiLectureAfterDeleteHooks, aiLectureHook)
		aiLectureAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		aiLectureBeforeUpsertMu.Lock()
		aiLectureBeforeUpsertHooks = append(aiLectureBeforeUpsertHooks, aiLectureHook)
		aiLectureBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		aiLectureAfterUpsertMu.Lock()
		aiLectureAfterUpsertHooks = append(aiLectureAfterUpsertHooks, aiLectureHook)
		aiLectureAfterUpsertMu.Unlock()
	}
}

// One returns a single aiLecture record from the query.
func (q aiLectureQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AiLecture, error) {
	o := &AiLecture{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for ai_lectures")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AiLecture records from the query.
func (q aiLectureQuery) All(ctx context.Context, exec boil.ContextExecutor) (AiLectureSlice, error) {
	var o []*AiLecture

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to AiLecture slice")
	}

	if len(aiLectureAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AiLecture records in the query.
func (q aiLectureQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count ai_lectures rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aiLectureQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if ai_lectures exists")
	}

	return count > 0, nil
}

// AirplaneMaterials retrieves all the airplane_material's AirplaneMaterials with an executor.
func (o *AiLecture) AirplaneMaterials(mods ...qm.QueryMod) airplaneMaterialQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"airplane_material_lectures\" on \"airplane_materials\".\"id\" = \"airplane_material_lectures\".\"airplane_material_id\""),
		qm.Where("\"airplane_material_lectures\".\"lecture_id\"=?", o.ID),
	)

	return AirplaneMaterials(queryMods...)
}

// LectureMaterialAnalysisResults retrieves all the material_analysis_result's MaterialAnalysisResults with an executor via lecture_id column.
func (o *AiLecture) LectureMaterialAnalysisResults(mods ...qm.QueryMod) materialAnalysisResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"material_analysis_results\".\"lecture_id\"=?", o.ID),
	)

	return MaterialAnalysisResults(queryMods...)
}

// LoadAirplaneMaterials allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aiLectureL) LoadAirplaneMaterials(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAiLecture interface{}, mods queries.Applicator) error {
	var slice []*AiLecture
	var object *AiLecture

	if singular {
		var ok bool
		object, ok = maybeAiLecture.(*AiLecture)
		if !ok {
			object = new(AiLecture)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAiLecture)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAiLecture))
			}
		}
	} else {
		s, ok := maybeAiLecture.(*[]*AiLecture)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAiLecture)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAiLecture))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aiLectureR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aiLectureR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"airplane_materials\".\"id\", \"airplane_materials\".\"airplane_model_id\", \"airplane_materials\".\"name\", \"airplane_materials\".\"description\", \"airplane_materials\".\"color\", \"airplane_materials\".\"created_at\", \"a\".\"lecture_id\""),
		qm.From("\"airplane_materials\""),
		qm.InnerJoin("\"airplane_material_lectures\" as \"a\" on \"airplane_materials\".\"id\" = \"a\".\"airplane_material_id\""),
		qm.WhereIn("\"a\".\"lecture_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load airplane_materials")
	}

	var resultSlice []*AirplaneMaterial

	var localJoinCols []int
	for results.Next() {
		one := new(AirplaneMaterial)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.AirplaneModelID, &one.Name, &one.Description, &one.Color, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for airplane_materials")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice airplane_materials")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on airplane_materials")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for airplane_materials")
	}

	if len(airplaneMaterialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AirplaneMaterials = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &airplaneMaterialR{}
			}
			foreign.R.LectureAiLectures = append(foreign.R.LectureAiLectures, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.AirplaneMaterials = append(local.R.AirplaneMaterials, foreign)
				if foreign.R == nil {
					foreign.R = &airplaneMaterialR{}
				}
				foreign.R.LectureAiLectures = append(foreign.R.LectureAiLectures, local)
				break
			}
		}
	}

	return nil
}

// LoadLectureMaterialAnalysisResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aiLectureL) LoadLectureMaterialAnalysisResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAiLecture interface{}, mods queries.Applicator) error {
	var slice []*AiLecture
	var object *AiLecture

	if singular {
		var ok bool
		object, ok = maybeAiLecture.(*AiLecture)
		if !ok {
			object = new(AiLecture)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAiLecture)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAiLecture))
			}
		}
	} else {
		s, ok := maybeAiLecture.(*[]*AiLecture)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAiLecture)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAiLecture))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aiLectureR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aiLectureR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`material_analysis_results`),
		qm.WhereIn(`material_analysis_results.lecture_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load material_analysis_results")
	}

	var resultSlice []*MaterialAnalysisResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice material_analysis_results")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on material_analysis_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for material_analysis_results")
	}

	if len(materialAnalysisResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LectureMaterialAnalysisResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &materialAnalysisResultR{}
			}
			foreign.R.Lecture = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LectureID) {
				local.R.LectureMaterialAnalysisResults = append(local.R.LectureMaterialAnalysisResults, foreign)
				if foreign.R == nil {
					foreign.R = &materialAnalysisResultR{}
				}
				foreign.R.Lecture = local
				break
			}
		}
	}

	return nil
}

// AddAirplaneMaterials adds the given related objects to the existing relationships
// of the ai_lecture, optionally inserting them as new records.
// Appends related to o.R.AirplaneMaterials.
// Sets related.R.LectureAiLectures appropriately.
func (o *AiLecture) AddAirplaneMaterials(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AirplaneMaterial) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"airplane_material_lectures\" (\"lecture_id\", \"airplane_material_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &aiLectureR{
			AirplaneMaterials: related,
		}
	} else {
		o.R.AirplaneMaterials = append(o.R.AirplaneMaterials, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &airplaneMaterialR{
				LectureAiLectures: AiLectureSlice{o},
			}
		} else {
			rel.R.LectureAiLectures = append(rel.R.LectureAiLectures, o)
		}
	}
	return nil
}

// SetAirplaneMaterials removes all previously related items of the
// ai_lecture replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LectureAiLectures's AirplaneMaterials accordingly.
// Replaces o.R.AirplaneMaterials with related.
// Sets related.R.LectureAiLectures's AirplaneMaterials accordingly.
func (o *AiLecture) SetAirplaneMaterials(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AirplaneMaterial) error {
	query := "delete from \"airplane_material_lectures\" where \"lecture_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAirplaneMaterialsFromLectureAiLecturesSlice(o, related)
	if o.R != nil {
		o.R.AirplaneMaterials = nil
	}

	return o.AddAirplaneMaterials(ctx, exec, insert, related...)
}

// RemoveAirplaneMaterials relationships from objects passed in.
// Removes related items from R.AirplaneMaterials (uses pointer comparison, removal does not keep order)
// Sets related.R.LectureAiLectures.
func (o *AiLecture) RemoveAirplaneMaterials(ctx context.Context, exec boil.ContextExecutor, related ...*AirplaneMaterial) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"airplane_material_lectures\" where \"lecture_id\" = $1 and \"airplane_material_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAirplaneMaterialsFromLectureAiLecturesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AirplaneMaterials {
			if rel != ri {
				continue
			}

			ln := len(o.R.AirplaneMaterials)
			if ln > 1 && i < ln-1 {
				o.R.AirplaneMaterials[i] = o.R.AirplaneMaterials[ln-1]
			}
			o.R.AirplaneMaterials = o.R.AirplaneMaterials[:ln-1]
			break
		}
	}

	return nil
}

func removeAirplaneMaterialsFromLectureAiLecturesSlice(o *AiLecture, related []*AirplaneMaterial) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.LectureAiLectures {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.LectureAiLectures)
			if ln > 1 && i < ln-1 {
				rel.R.LectureAiLectures[i] = rel.R.LectureAiLectures[ln-1]
			}
			rel.R.LectureAiLectures = rel.R.LectureAiLectures[:ln-1]
			break
		}
	}
}

// AddLectureMaterialAnalysisResults adds the given related objects to the existing relationships
// of the ai_lecture, optionally inserting them as new records.
// Appends related to o.R.LectureMaterialAnalysisResults.
// Sets related.R.Lecture appropriately.
func (o *AiLecture) AddLectureMaterialAnalysisResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MaterialAnalysisResult) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LectureID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"material_analysis_results\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lecture_id"}),
				strmangle.WhereClause("\"", "\"", 2, materialAnalysisResultPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LectureID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &aiLectureR{
			LectureMaterialAnalysisResults: related,
		}
	} else {
		o.R.LectureMaterialAnalysisResults = append(o.R.LectureMaterialAnalysisResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &materialAnalysisResultR{
				Lecture: o,
			}
		} else {
			rel.R.Lecture = o
		}
	}
	return nil
}

// SetLectureMaterialAnalysisResults removes all previously related items of the
// ai_lecture replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Lecture's LectureMaterialAnalysisResults accordingly.
// Replaces o.R.LectureMaterialAnalysisResults with related.
// Sets related.R.Lecture's LectureMaterialAnalysisResults accordingly.
func (o *AiLecture) SetLectureMaterialAnalysisResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MaterialAnalysisResult) error {
	query := "update \"material_analysis_results\" set \"lecture_id\" = null where \"lecture_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LectureMaterialAnalysisResults {
			queries.SetScanner(&rel.LectureID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Lecture = nil
		}
		o.R.LectureMaterialAnalysisResults = nil
	}

	return o.AddLectureMaterialAnalysisResults(ctx, exec, insert, related...)
}

// RemoveLectureMaterialAnalysisResults relationships from objects passed in.
// Removes related items from R.LectureMaterialAnalysisResults (uses pointer comparison, removal does not keep order)
// Sets related.R.Lecture.
func (o *AiLecture) RemoveLectureMaterialAnalysisResults(ctx context.Context, exec boil.ContextExecutor, related ...*MaterialAnalysisResult) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LectureID, nil)
		if rel.R != nil {
			rel.R.Lecture = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("lecture_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LectureMaterialAnalysisResults {
			if rel != ri {
				continue
			}

			ln := len(o.R.LectureMaterialAnalysisResults)
			if ln > 1 && i < ln-1 {
				o.R.LectureMaterialAnalysisResults[i] = o.R.LectureMaterialAnalysisResults[ln-1]
			}
			o.R.LectureMaterialAnalysisResults = o.R.LectureMaterialAnalysisResults[:ln-1]
			break
		}
	}

	return nil
}

// AiLectures retrieves all the records using an executor.
func AiLectures(mods ...qm.QueryMod) aiLectureQuery {
	mods = append(mods, qm.From("\"ai_lectures\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ai_lectures\".*"})
	}

	return aiLectureQuery{q}
}

// FindAiLecture retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAiLecture(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AiLecture, error) {
	aiLectureObj := &AiLecture{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ai_lectures\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, aiLectureObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from ai_lectures")
	}

	if err = aiLectureObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aiLectureObj, err
	}

	return aiLectureObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AiLecture) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no ai_lectures provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aiLectureColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aiLectureInsertCacheMut.RLock()
	cache, cached := aiLectureInsertCache[key]
	aiLectureInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aiLectureAllColumns,
			aiLectureColumnsWithDefault,
			aiLectureColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aiLectureType, aiLectureMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aiLectureType, aiLectureMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ai_lectures\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ai_lectures\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into ai_lectures")
	}

	if !cached {
		aiLectureInsertCacheMut.Lock()
		aiLectureInsertCache[key] = cache
		aiLectureInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AiLecture.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AiLecture) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aiLectureUpdateCacheMut.RLock()
	cache, cached := aiLectureUpdateCache[key]
	aiLectureUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aiLectureAllColumns,
			aiLecturePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update ai_lectures, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ai_lectures\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, aiLecturePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aiLectureType, aiLectureMapping, append(wl, aiLecturePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update ai_lectures row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for ai_lectures")
	}

	if !cached {
		aiLectureUpdateCacheMut.Lock()
		aiLectureUpdateCache[key] = cache
		aiLectureUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aiLectureQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for ai_lectures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for ai_lectures")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AiLectureSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aiLecturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ai_lectures\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aiLecturePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in aiLecture slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all aiLecture")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AiLecture) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no ai_lectures provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aiLectureColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aiLectureUpsertCacheMut.RLock()
	cache, cached := aiLectureUpsertCache[key]
	aiLectureUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			aiLectureAllColumns,
			aiLectureColumnsWithDefault,
			aiLectureColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			aiLectureAllColumns,
			aiLecturePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert ai_lectures, could not build update column list")
		}

		ret := strmangle.SetComplement(aiLectureAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(aiLecturePrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert ai_lectures, could not build conflict column list")
			}

			conflict = make([]string, len(aiLecturePrimaryKeyColumns))
			copy(conflict, aiLecturePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ai_lectures\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(aiLectureType, aiLectureMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aiLectureType, aiLectureMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert ai_lectures")
	}

	if !cached {
		aiLectureUpsertCacheMut.Lock()
		aiLectureUpsertCache[key] = cache
		aiLectureUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AiLecture record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AiLecture) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no AiLecture provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aiLecturePrimaryKeyMapping)
	sql := "DELETE FROM \"ai_lectures\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from ai_lectures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for ai_lectures")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aiLectureQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no aiLectureQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from ai_lectures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for ai_lectures")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AiLectureSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aiLectureBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aiLecturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ai_lectures\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aiLecturePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from aiLecture slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for ai_lectures")
	}

	if len(aiLectureAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AiLecture) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAiLecture(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AiLectureSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AiLectureSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aiLecturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ai_lectures\".* FROM \"ai_lectures\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aiLecturePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in AiLectureSlice")
	}

	*o = slice

	return nil
}

// AiLectureExists checks if the AiLecture row exists.
func AiLectureExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ai_lectures\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if ai_lectures exists")
	}

	return exists, nil
}

// Exists checks if the AiLecture row exists.
func (o *AiLecture) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AiLectureExists(ctx, exec, o.ID)
}
