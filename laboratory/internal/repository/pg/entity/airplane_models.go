// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AirplaneModel is an object representing the database table.
type AirplaneModel struct {
	ID                 int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name               string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Manufacturer       string      `boil:"manufacturer" json:"manufacturer" toml:"manufacturer" yaml:"manufacturer"`
	Year               null.Int    `boil:"year" json:"year,omitempty" toml:"year" yaml:"year,omitempty"`
	Description        null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	LectureDescription null.String `boil:"lecture_description" json:"lecture_description,omitempty" toml:"lecture_description" yaml:"lecture_description,omitempty"`
	CreatedAt          null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *airplaneModelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L airplaneModelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AirplaneModelColumns = struct {
	ID                 string
	Name               string
	Manufacturer       string
	Year               string
	Description        string
	LectureDescription string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	Name:               "name",
	Manufacturer:       "manufacturer",
	Year:               "year",
	Description:        "description",
	LectureDescription: "lecture_description",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var AirplaneModelTableColumns = struct {
	ID                 string
	Name               string
	Manufacturer       string
	Year               string
	Description        string
	LectureDescription string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "airplane_models.id",
	Name:               "airplane_models.name",
	Manufacturer:       "airplane_models.manufacturer",
	Year:               "airplane_models.year",
	Description:        "airplane_models.description",
	LectureDescription: "airplane_models.lecture_description",
	CreatedAt:          "airplane_models.created_at",
	UpdatedAt:          "airplane_models.updated_at",
}

// Generated where

var AirplaneModelWhere = struct {
	ID                 whereHelperint
	Name               whereHelperstring
	Manufacturer       whereHelperstring
	Year               whereHelpernull_Int
	Description        whereHelpernull_String
	LectureDescription whereHelpernull_String
	CreatedAt          whereHelpernull_Time
	UpdatedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "\"airplane_models\".\"id\""},
	Name:               whereHelperstring{field: "\"airplane_models\".\"name\""},
	Manufacturer:       whereHelperstring{field: "\"airplane_models\".\"manufacturer\""},
	Year:               whereHelpernull_Int{field: "\"airplane_models\".\"year\""},
	Description:        whereHelpernull_String{field: "\"airplane_models\".\"description\""},
	LectureDescription: whereHelpernull_String{field: "\"airplane_models\".\"lecture_description\""},
	CreatedAt:          whereHelpernull_Time{field: "\"airplane_models\".\"created_at\""},
	UpdatedAt:          whereHelpernull_Time{field: "\"airplane_models\".\"updated_at\""},
}

// AirplaneModelRels is where relationship names are stored.
var AirplaneModelRels = struct {
	AirplaneMaterials string
}{
	AirplaneMaterials: "AirplaneMaterials",
}

// airplaneModelR is where relationships are stored.
type airplaneModelR struct {
	AirplaneMaterials AirplaneMaterialSlice `boil:"AirplaneMaterials" json:"AirplaneMaterials" toml:"AirplaneMaterials" yaml:"AirplaneMaterials"`
}

// NewStruct creates a new relationship struct
func (*airplaneModelR) NewStruct() *airplaneModelR {
	return &airplaneModelR{}
}

func (r *airplaneModelR) GetAirplaneMaterials() AirplaneMaterialSlice {
	if r == nil {
		return nil
	}
	return r.AirplaneMaterials
}

// airplaneModelL is where Load methods for each relationship are stored.
type airplaneModelL struct{}

var (
	airplaneModelAllColumns            = []string{"id", "name", "manufacturer", "year", "description", "lecture_description", "created_at", "updated_at"}
	airplaneModelColumnsWithoutDefault = []string{"name", "manufacturer"}
	airplaneModelColumnsWithDefault    = []string{"id", "year", "description", "lecture_description", "created_at", "updated_at"}
	airplaneModelPrimaryKeyColumns     = []string{"id"}
	airplaneModelGeneratedColumns      = []string{}
)

type (
	// AirplaneModelSlice is an alias for a slice of pointers to AirplaneModel.
	// This should almost always be used instead of []AirplaneModel.
	AirplaneModelSlice []*AirplaneModel
	// AirplaneModelHook is the signature for custom AirplaneModel hook methods
	AirplaneModelHook func(context.Context, boil.ContextExecutor, *AirplaneModel) error

	airplaneModelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	airplaneModelType                 = reflect.TypeOf(&AirplaneModel{})
	airplaneModelMapping              = queries.MakeStructMapping(airplaneModelType)
	airplaneModelPrimaryKeyMapping, _ = queries.BindMapping(airplaneModelType, airplaneModelMapping, airplaneModelPrimaryKeyColumns)
	airplaneModelInsertCacheMut       sync.RWMutex
	airplaneModelInsertCache          = make(map[string]insertCache)
	airplaneModelUpdateCacheMut       sync.RWMutex
	airplaneModelUpdateCache          = make(map[string]updateCache)
	airplaneModelUpsertCacheMut       sync.RWMutex
	airplaneModelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var airplaneModelAfterSelectMu sync.Mutex
var airplaneModelAfterSelectHooks []AirplaneModelHook

var airplaneModelBeforeInsertMu sync.Mutex
var airplaneModelBeforeInsertHooks []AirplaneModelHook
var airplaneModelAfterInsertMu sync.Mutex
var airplaneModelAfterInsertHooks []AirplaneModelHook

var airplaneModelBeforeUpdateMu sync.Mutex
var airplaneModelBeforeUpdateHooks []AirplaneModelHook
var airplaneModelAfterUpdateMu sync.Mutex
var airplaneModelAfterUpdateHooks []AirplaneModelHook

var airplaneModelBeforeDeleteMu sync.Mutex
var airplaneModelBeforeDeleteHooks []AirplaneModelHook
var airplaneModelAfterDeleteMu sync.Mutex
var airplaneModelAfterDeleteHooks []AirplaneModelHook

var airplaneModelBeforeUpsertMu sync.Mutex
var airplaneModelBeforeUpsertHooks []AirplaneModelHook
var airplaneModelAfterUpsertMu sync.Mutex
var airplaneModelAfterUpsertHooks []AirplaneModelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AirplaneModel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneModelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AirplaneModel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneModelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AirplaneModel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneModelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AirplaneModel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneModelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AirplaneModel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneModelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AirplaneModel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneModelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AirplaneModel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneModelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AirplaneModel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneModelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AirplaneModel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range airplaneModelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAirplaneModelHook registers your hook function for all future operations.
func AddAirplaneModelHook(hookPoint boil.HookPoint, airplaneModelHook AirplaneModelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		airplaneModelAfterSelectMu.Lock()
		airplaneModelAfterSelectHooks = append(airplaneModelAfterSelectHooks, airplaneModelHook)
		airplaneModelAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		airplaneModelBeforeInsertMu.Lock()
		airplaneModelBeforeInsertHooks = append(airplaneModelBeforeInsertHooks, airplaneModelHook)
		airplaneModelBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		airplaneModelAfterInsertMu.Lock()
		airplaneModelAfterInsertHooks = append(airplaneModelAfterInsertHooks, airplaneModelHook)
		airplaneModelAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		airplaneModelBeforeUpdateMu.Lock()
		airplaneModelBeforeUpdateHooks = append(airplaneModelBeforeUpdateHooks, airplaneModelHook)
		airplaneModelBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		airplaneModelAfterUpdateMu.Lock()
		airplaneModelAfterUpdateHooks = append(airplaneModelAfterUpdateHooks, airplaneModelHook)
		airplaneModelAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		airplaneModelBeforeDeleteMu.Lock()
		airplaneModelBeforeDeleteHooks = append(airplaneModelBeforeDeleteHooks, airplaneModelHook)
		airplaneModelBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		airplaneModelAfterDeleteMu.Lock()
		airplaneModelAfterDeleteHooks = append(airplaneModelAfterDeleteHooks, airplaneModelHook)
		airplaneModelAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		airplaneModelBeforeUpsertMu.Lock()
		airplaneModelBeforeUpsertHooks = append(airplaneModelBeforeUpsertHooks, airplaneModelHook)
		airplaneModelBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		airplaneModelAfterUpsertMu.Lock()
		airplaneModelAfterUpsertHooks = append(airplaneModelAfterUpsertHooks, airplaneModelHook)
		airplaneModelAfterUpsertMu.Unlock()
	}
}

// One returns a single airplaneModel record from the query.
func (q airplaneModelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AirplaneModel, error) {
	o := &AirplaneModel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for airplane_models")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AirplaneModel records from the query.
func (q airplaneModelQuery) All(ctx context.Context, exec boil.ContextExecutor) (AirplaneModelSlice, error) {
	var o []*AirplaneModel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to AirplaneModel slice")
	}

	if len(airplaneModelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AirplaneModel records in the query.
func (q airplaneModelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count airplane_models rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q airplaneModelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if airplane_models exists")
	}

	return count > 0, nil
}

// AirplaneMaterials retrieves all the airplane_material's AirplaneMaterials with an executor.
func (o *AirplaneModel) AirplaneMaterials(mods ...qm.QueryMod) airplaneMaterialQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"airplane_materials\".\"airplane_model_id\"=?", o.ID),
	)

	return AirplaneMaterials(queryMods...)
}

// LoadAirplaneMaterials allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (airplaneModelL) LoadAirplaneMaterials(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAirplaneModel interface{}, mods queries.Applicator) error {
	var slice []*AirplaneModel
	var object *AirplaneModel

	if singular {
		var ok bool
		object, ok = maybeAirplaneModel.(*AirplaneModel)
		if !ok {
			object = new(AirplaneModel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAirplaneModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAirplaneModel))
			}
		}
	} else {
		s, ok := maybeAirplaneModel.(*[]*AirplaneModel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAirplaneModel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAirplaneModel))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &airplaneModelR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &airplaneModelR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`airplane_materials`),
		qm.WhereIn(`airplane_materials.airplane_model_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load airplane_materials")
	}

	var resultSlice []*AirplaneMaterial
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice airplane_materials")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on airplane_materials")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for airplane_materials")
	}

	if len(airplaneMaterialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AirplaneMaterials = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &airplaneMaterialR{}
			}
			foreign.R.AirplaneModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AirplaneModelID) {
				local.R.AirplaneMaterials = append(local.R.AirplaneMaterials, foreign)
				if foreign.R == nil {
					foreign.R = &airplaneMaterialR{}
				}
				foreign.R.AirplaneModel = local
				break
			}
		}
	}

	return nil
}

// AddAirplaneMaterials adds the given related objects to the existing relationships
// of the airplane_model, optionally inserting them as new records.
// Appends related to o.R.AirplaneMaterials.
// Sets related.R.AirplaneModel appropriately.
func (o *AirplaneModel) AddAirplaneMaterials(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AirplaneMaterial) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AirplaneModelID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"airplane_materials\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"airplane_model_id"}),
				strmangle.WhereClause("\"", "\"", 2, airplaneMaterialPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AirplaneModelID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &airplaneModelR{
			AirplaneMaterials: related,
		}
	} else {
		o.R.AirplaneMaterials = append(o.R.AirplaneMaterials, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &airplaneMaterialR{
				AirplaneModel: o,
			}
		} else {
			rel.R.AirplaneModel = o
		}
	}
	return nil
}

// SetAirplaneMaterials removes all previously related items of the
// airplane_model replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AirplaneModel's AirplaneMaterials accordingly.
// Replaces o.R.AirplaneMaterials with related.
// Sets related.R.AirplaneModel's AirplaneMaterials accordingly.
func (o *AirplaneModel) SetAirplaneMaterials(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AirplaneMaterial) error {
	query := "update \"airplane_materials\" set \"airplane_model_id\" = null where \"airplane_model_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AirplaneMaterials {
			queries.SetScanner(&rel.AirplaneModelID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AirplaneModel = nil
		}
		o.R.AirplaneMaterials = nil
	}

	return o.AddAirplaneMaterials(ctx, exec, insert, related...)
}

// RemoveAirplaneMaterials relationships from objects passed in.
// Removes related items from R.AirplaneMaterials (uses pointer comparison, removal does not keep order)
// Sets related.R.AirplaneModel.
func (o *AirplaneModel) RemoveAirplaneMaterials(ctx context.Context, exec boil.ContextExecutor, related ...*AirplaneMaterial) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AirplaneModelID, nil)
		if rel.R != nil {
			rel.R.AirplaneModel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("airplane_model_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AirplaneMaterials {
			if rel != ri {
				continue
			}

			ln := len(o.R.AirplaneMaterials)
			if ln > 1 && i < ln-1 {
				o.R.AirplaneMaterials[i] = o.R.AirplaneMaterials[ln-1]
			}
			o.R.AirplaneMaterials = o.R.AirplaneMaterials[:ln-1]
			break
		}
	}

	return nil
}

// AirplaneModels retrieves all the records using an executor.
func AirplaneModels(mods ...qm.QueryMod) airplaneModelQuery {
	mods = append(mods, qm.From("\"airplane_models\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"airplane_models\".*"})
	}

	return airplaneModelQuery{q}
}

// FindAirplaneModel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAirplaneModel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AirplaneModel, error) {
	airplaneModelObj := &AirplaneModel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"airplane_models\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, airplaneModelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from airplane_models")
	}

	if err = airplaneModelObj.doAfterSelectHooks(ctx, exec); err != nil {
		return airplaneModelObj, err
	}

	return airplaneModelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AirplaneModel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no airplane_models provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(airplaneModelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	airplaneModelInsertCacheMut.RLock()
	cache, cached := airplaneModelInsertCache[key]
	airplaneModelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			airplaneModelAllColumns,
			airplaneModelColumnsWithDefault,
			airplaneModelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(airplaneModelType, airplaneModelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(airplaneModelType, airplaneModelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"airplane_models\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"airplane_models\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into airplane_models")
	}

	if !cached {
		airplaneModelInsertCacheMut.Lock()
		airplaneModelInsertCache[key] = cache
		airplaneModelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AirplaneModel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AirplaneModel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	airplaneModelUpdateCacheMut.RLock()
	cache, cached := airplaneModelUpdateCache[key]
	airplaneModelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			airplaneModelAllColumns,
			airplaneModelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update airplane_models, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"airplane_models\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, airplaneModelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(airplaneModelType, airplaneModelMapping, append(wl, airplaneModelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update airplane_models row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for airplane_models")
	}

	if !cached {
		airplaneModelUpdateCacheMut.Lock()
		airplaneModelUpdateCache[key] = cache
		airplaneModelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q airplaneModelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for airplane_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for airplane_models")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AirplaneModelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), airplaneModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"airplane_models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, airplaneModelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in airplaneModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all airplaneModel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AirplaneModel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no airplane_models provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(airplaneModelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	airplaneModelUpsertCacheMut.RLock()
	cache, cached := airplaneModelUpsertCache[key]
	airplaneModelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			airplaneModelAllColumns,
			airplaneModelColumnsWithDefault,
			airplaneModelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			airplaneModelAllColumns,
			airplaneModelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert airplane_models, could not build update column list")
		}

		ret := strmangle.SetComplement(airplaneModelAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(airplaneModelPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert airplane_models, could not build conflict column list")
			}

			conflict = make([]string, len(airplaneModelPrimaryKeyColumns))
			copy(conflict, airplaneModelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"airplane_models\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(airplaneModelType, airplaneModelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(airplaneModelType, airplaneModelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert airplane_models")
	}

	if !cached {
		airplaneModelUpsertCacheMut.Lock()
		airplaneModelUpsertCache[key] = cache
		airplaneModelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AirplaneModel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AirplaneModel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no AirplaneModel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), airplaneModelPrimaryKeyMapping)
	sql := "DELETE FROM \"airplane_models\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from airplane_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for airplane_models")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q airplaneModelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no airplaneModelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from airplane_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for airplane_models")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AirplaneModelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(airplaneModelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), airplaneModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"airplane_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, airplaneModelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from airplaneModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for airplane_models")
	}

	if len(airplaneModelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AirplaneModel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAirplaneModel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AirplaneModelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AirplaneModelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), airplaneModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"airplane_models\".* FROM \"airplane_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, airplaneModelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in AirplaneModelSlice")
	}

	*o = slice

	return nil
}

// AirplaneModelExists checks if the AirplaneModel row exists.
func AirplaneModelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"airplane_models\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if airplane_models exists")
	}

	return exists, nil
}

// Exists checks if the AirplaneModel row exists.
func (o *AirplaneModel) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AirplaneModelExists(ctx, exec, o.ID)
}
