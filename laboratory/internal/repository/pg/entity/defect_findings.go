// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DefectFinding is an object representing the database table.
type DefectFinding struct {
	AnalysisID          int         `boil:"analysis_id" json:"analysis_id" toml:"analysis_id" yaml:"analysis_id"`
	DefectTypeID        int         `boil:"defect_type_id" json:"defect_type_id" toml:"defect_type_id" yaml:"defect_type_id"`
	Probability         float64     `boil:"probability" json:"probability" toml:"probability" yaml:"probability"`
	LocationCoordinates null.String `boil:"location_coordinates" json:"location_coordinates,omitempty" toml:"location_coordinates" yaml:"location_coordinates,omitempty"`
	Severity            string      `boil:"severity" json:"severity" toml:"severity" yaml:"severity"`

	R *defectFindingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L defectFindingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DefectFindingColumns = struct {
	AnalysisID          string
	DefectTypeID        string
	Probability         string
	LocationCoordinates string
	Severity            string
}{
	AnalysisID:          "analysis_id",
	DefectTypeID:        "defect_type_id",
	Probability:         "probability",
	LocationCoordinates: "location_coordinates",
	Severity:            "severity",
}

var DefectFindingTableColumns = struct {
	AnalysisID          string
	DefectTypeID        string
	Probability         string
	LocationCoordinates string
	Severity            string
}{
	AnalysisID:          "defect_findings.analysis_id",
	DefectTypeID:        "defect_findings.defect_type_id",
	Probability:         "defect_findings.probability",
	LocationCoordinates: "defect_findings.location_coordinates",
	Severity:            "defect_findings.severity",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DefectFindingWhere = struct {
	AnalysisID          whereHelperint
	DefectTypeID        whereHelperint
	Probability         whereHelperfloat64
	LocationCoordinates whereHelpernull_String
	Severity            whereHelperstring
}{
	AnalysisID:          whereHelperint{field: "\"defect_findings\".\"analysis_id\""},
	DefectTypeID:        whereHelperint{field: "\"defect_findings\".\"defect_type_id\""},
	Probability:         whereHelperfloat64{field: "\"defect_findings\".\"probability\""},
	LocationCoordinates: whereHelpernull_String{field: "\"defect_findings\".\"location_coordinates\""},
	Severity:            whereHelperstring{field: "\"defect_findings\".\"severity\""},
}

// DefectFindingRels is where relationship names are stored.
var DefectFindingRels = struct {
	Analysis   string
	DefectType string
}{
	Analysis:   "Analysis",
	DefectType: "DefectType",
}

// defectFindingR is where relationships are stored.
type defectFindingR struct {
	Analysis   *AnalysisResult `boil:"Analysis" json:"Analysis" toml:"Analysis" yaml:"Analysis"`
	DefectType *DefectType     `boil:"DefectType" json:"DefectType" toml:"DefectType" yaml:"DefectType"`
}

// NewStruct creates a new relationship struct
func (*defectFindingR) NewStruct() *defectFindingR {
	return &defectFindingR{}
}

func (r *defectFindingR) GetAnalysis() *AnalysisResult {
	if r == nil {
		return nil
	}
	return r.Analysis
}

func (r *defectFindingR) GetDefectType() *DefectType {
	if r == nil {
		return nil
	}
	return r.DefectType
}

// defectFindingL is where Load methods for each relationship are stored.
type defectFindingL struct{}

var (
	defectFindingAllColumns            = []string{"analysis_id", "defect_type_id", "probability", "location_coordinates", "severity"}
	defectFindingColumnsWithoutDefault = []string{"analysis_id", "defect_type_id", "probability", "severity"}
	defectFindingColumnsWithDefault    = []string{"location_coordinates"}
	defectFindingPrimaryKeyColumns     = []string{"analysis_id", "defect_type_id"}
	defectFindingGeneratedColumns      = []string{}
)

type (
	// DefectFindingSlice is an alias for a slice of pointers to DefectFinding.
	// This should almost always be used instead of []DefectFinding.
	DefectFindingSlice []*DefectFinding
	// DefectFindingHook is the signature for custom DefectFinding hook methods
	DefectFindingHook func(context.Context, boil.ContextExecutor, *DefectFinding) error

	defectFindingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	defectFindingType                 = reflect.TypeOf(&DefectFinding{})
	defectFindingMapping              = queries.MakeStructMapping(defectFindingType)
	defectFindingPrimaryKeyMapping, _ = queries.BindMapping(defectFindingType, defectFindingMapping, defectFindingPrimaryKeyColumns)
	defectFindingInsertCacheMut       sync.RWMutex
	defectFindingInsertCache          = make(map[string]insertCache)
	defectFindingUpdateCacheMut       sync.RWMutex
	defectFindingUpdateCache          = make(map[string]updateCache)
	defectFindingUpsertCacheMut       sync.RWMutex
	defectFindingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var defectFindingAfterSelectMu sync.Mutex
var defectFindingAfterSelectHooks []DefectFindingHook

var defectFindingBeforeInsertMu sync.Mutex
var defectFindingBeforeInsertHooks []DefectFindingHook
var defectFindingAfterInsertMu sync.Mutex
var defectFindingAfterInsertHooks []DefectFindingHook

var defectFindingBeforeUpdateMu sync.Mutex
var defectFindingBeforeUpdateHooks []DefectFindingHook
var defectFindingAfterUpdateMu sync.Mutex
var defectFindingAfterUpdateHooks []DefectFindingHook

var defectFindingBeforeDeleteMu sync.Mutex
var defectFindingBeforeDeleteHooks []DefectFindingHook
var defectFindingAfterDeleteMu sync.Mutex
var defectFindingAfterDeleteHooks []DefectFindingHook

var defectFindingBeforeUpsertMu sync.Mutex
var defectFindingBeforeUpsertHooks []DefectFindingHook
var defectFindingAfterUpsertMu sync.Mutex
var defectFindingAfterUpsertHooks []DefectFindingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DefectFinding) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defectFindingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DefectFinding) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defectFindingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DefectFinding) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defectFindingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DefectFinding) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defectFindingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DefectFinding) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defectFindingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DefectFinding) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defectFindingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DefectFinding) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defectFindingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DefectFinding) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defectFindingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DefectFinding) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defectFindingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDefectFindingHook registers your hook function for all future operations.
func AddDefectFindingHook(hookPoint boil.HookPoint, defectFindingHook DefectFindingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		defectFindingAfterSelectMu.Lock()
		defectFindingAfterSelectHooks = append(defectFindingAfterSelectHooks, defectFindingHook)
		defectFindingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		defectFindingBeforeInsertMu.Lock()
		defectFindingBeforeInsertHooks = append(defectFindingBeforeInsertHooks, defectFindingHook)
		defectFindingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		defectFindingAfterInsertMu.Lock()
		defectFindingAfterInsertHooks = append(defectFindingAfterInsertHooks, defectFindingHook)
		defectFindingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		defectFindingBeforeUpdateMu.Lock()
		defectFindingBeforeUpdateHooks = append(defectFindingBeforeUpdateHooks, defectFindingHook)
		defectFindingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		defectFindingAfterUpdateMu.Lock()
		defectFindingAfterUpdateHooks = append(defectFindingAfterUpdateHooks, defectFindingHook)
		defectFindingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		defectFindingBeforeDeleteMu.Lock()
		defectFindingBeforeDeleteHooks = append(defectFindingBeforeDeleteHooks, defectFindingHook)
		defectFindingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		defectFindingAfterDeleteMu.Lock()
		defectFindingAfterDeleteHooks = append(defectFindingAfterDeleteHooks, defectFindingHook)
		defectFindingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		defectFindingBeforeUpsertMu.Lock()
		defectFindingBeforeUpsertHooks = append(defectFindingBeforeUpsertHooks, defectFindingHook)
		defectFindingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		defectFindingAfterUpsertMu.Lock()
		defectFindingAfterUpsertHooks = append(defectFindingAfterUpsertHooks, defectFindingHook)
		defectFindingAfterUpsertMu.Unlock()
	}
}

// One returns a single defectFinding record from the query.
func (q defectFindingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DefectFinding, error) {
	o := &DefectFinding{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for defect_findings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DefectFinding records from the query.
func (q defectFindingQuery) All(ctx context.Context, exec boil.ContextExecutor) (DefectFindingSlice, error) {
	var o []*DefectFinding

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to DefectFinding slice")
	}

	if len(defectFindingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DefectFinding records in the query.
func (q defectFindingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count defect_findings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q defectFindingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if defect_findings exists")
	}

	return count > 0, nil
}

// Analysis pointed to by the foreign key.
func (o *DefectFinding) Analysis(mods ...qm.QueryMod) analysisResultQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AnalysisID),
	}

	queryMods = append(queryMods, mods...)

	return AnalysisResults(queryMods...)
}

// DefectType pointed to by the foreign key.
func (o *DefectFinding) DefectType(mods ...qm.QueryMod) defectTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DefectTypeID),
	}

	queryMods = append(queryMods, mods...)

	return DefectTypes(queryMods...)
}

// LoadAnalysis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (defectFindingL) LoadAnalysis(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDefectFinding interface{}, mods queries.Applicator) error {
	var slice []*DefectFinding
	var object *DefectFinding

	if singular {
		var ok bool
		object, ok = maybeDefectFinding.(*DefectFinding)
		if !ok {
			object = new(DefectFinding)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDefectFinding)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDefectFinding))
			}
		}
	} else {
		s, ok := maybeDefectFinding.(*[]*DefectFinding)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDefectFinding)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDefectFinding))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &defectFindingR{}
		}
		args[object.AnalysisID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &defectFindingR{}
			}

			args[obj.AnalysisID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`analysis_results`),
		qm.WhereIn(`analysis_results.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AnalysisResult")
	}

	var resultSlice []*AnalysisResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AnalysisResult")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for analysis_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for analysis_results")
	}

	if len(analysisResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Analysis = foreign
		if foreign.R == nil {
			foreign.R = &analysisResultR{}
		}
		foreign.R.AnalysisDefectFindings = append(foreign.R.AnalysisDefectFindings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AnalysisID == foreign.ID {
				local.R.Analysis = foreign
				if foreign.R == nil {
					foreign.R = &analysisResultR{}
				}
				foreign.R.AnalysisDefectFindings = append(foreign.R.AnalysisDefectFindings, local)
				break
			}
		}
	}

	return nil
}

// LoadDefectType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (defectFindingL) LoadDefectType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDefectFinding interface{}, mods queries.Applicator) error {
	var slice []*DefectFinding
	var object *DefectFinding

	if singular {
		var ok bool
		object, ok = maybeDefectFinding.(*DefectFinding)
		if !ok {
			object = new(DefectFinding)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDefectFinding)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDefectFinding))
			}
		}
	} else {
		s, ok := maybeDefectFinding.(*[]*DefectFinding)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDefectFinding)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDefectFinding))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &defectFindingR{}
		}
		args[object.DefectTypeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &defectFindingR{}
			}

			args[obj.DefectTypeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`defect_types`),
		qm.WhereIn(`defect_types.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DefectType")
	}

	var resultSlice []*DefectType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DefectType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for defect_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for defect_types")
	}

	if len(defectTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DefectType = foreign
		if foreign.R == nil {
			foreign.R = &defectTypeR{}
		}
		foreign.R.DefectFindings = append(foreign.R.DefectFindings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DefectTypeID == foreign.ID {
				local.R.DefectType = foreign
				if foreign.R == nil {
					foreign.R = &defectTypeR{}
				}
				foreign.R.DefectFindings = append(foreign.R.DefectFindings, local)
				break
			}
		}
	}

	return nil
}

// SetAnalysis of the defectFinding to the related item.
// Sets o.R.Analysis to related.
// Adds o to related.R.AnalysisDefectFindings.
func (o *DefectFinding) SetAnalysis(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AnalysisResult) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"defect_findings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"analysis_id"}),
		strmangle.WhereClause("\"", "\"", 2, defectFindingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AnalysisID, o.DefectTypeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AnalysisID = related.ID
	if o.R == nil {
		o.R = &defectFindingR{
			Analysis: related,
		}
	} else {
		o.R.Analysis = related
	}

	if related.R == nil {
		related.R = &analysisResultR{
			AnalysisDefectFindings: DefectFindingSlice{o},
		}
	} else {
		related.R.AnalysisDefectFindings = append(related.R.AnalysisDefectFindings, o)
	}

	return nil
}

// SetDefectType of the defectFinding to the related item.
// Sets o.R.DefectType to related.
// Adds o to related.R.DefectFindings.
func (o *DefectFinding) SetDefectType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DefectType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"defect_findings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"defect_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, defectFindingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AnalysisID, o.DefectTypeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DefectTypeID = related.ID
	if o.R == nil {
		o.R = &defectFindingR{
			DefectType: related,
		}
	} else {
		o.R.DefectType = related
	}

	if related.R == nil {
		related.R = &defectTypeR{
			DefectFindings: DefectFindingSlice{o},
		}
	} else {
		related.R.DefectFindings = append(related.R.DefectFindings, o)
	}

	return nil
}

// DefectFindings retrieves all the records using an executor.
func DefectFindings(mods ...qm.QueryMod) defectFindingQuery {
	mods = append(mods, qm.From("\"defect_findings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"defect_findings\".*"})
	}

	return defectFindingQuery{q}
}

// FindDefectFinding retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDefectFinding(ctx context.Context, exec boil.ContextExecutor, analysisID int, defectTypeID int, selectCols ...string) (*DefectFinding, error) {
	defectFindingObj := &DefectFinding{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"defect_findings\" where \"analysis_id\"=$1 AND \"defect_type_id\"=$2", sel,
	)

	q := queries.Raw(query, analysisID, defectTypeID)

	err := q.Bind(ctx, exec, defectFindingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from defect_findings")
	}

	if err = defectFindingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return defectFindingObj, err
	}

	return defectFindingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DefectFinding) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no defect_findings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(defectFindingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	defectFindingInsertCacheMut.RLock()
	cache, cached := defectFindingInsertCache[key]
	defectFindingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			defectFindingAllColumns,
			defectFindingColumnsWithDefault,
			defectFindingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(defectFindingType, defectFindingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(defectFindingType, defectFindingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"defect_findings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"defect_findings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into defect_findings")
	}

	if !cached {
		defectFindingInsertCacheMut.Lock()
		defectFindingInsertCache[key] = cache
		defectFindingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DefectFinding.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DefectFinding) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	defectFindingUpdateCacheMut.RLock()
	cache, cached := defectFindingUpdateCache[key]
	defectFindingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			defectFindingAllColumns,
			defectFindingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update defect_findings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"defect_findings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, defectFindingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(defectFindingType, defectFindingMapping, append(wl, defectFindingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update defect_findings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for defect_findings")
	}

	if !cached {
		defectFindingUpdateCacheMut.Lock()
		defectFindingUpdateCache[key] = cache
		defectFindingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q defectFindingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for defect_findings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for defect_findings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DefectFindingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), defectFindingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"defect_findings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, defectFindingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in defectFinding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all defectFinding")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DefectFinding) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no defect_findings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(defectFindingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	defectFindingUpsertCacheMut.RLock()
	cache, cached := defectFindingUpsertCache[key]
	defectFindingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			defectFindingAllColumns,
			defectFindingColumnsWithDefault,
			defectFindingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			defectFindingAllColumns,
			defectFindingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert defect_findings, could not build update column list")
		}

		ret := strmangle.SetComplement(defectFindingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(defectFindingPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert defect_findings, could not build conflict column list")
			}

			conflict = make([]string, len(defectFindingPrimaryKeyColumns))
			copy(conflict, defectFindingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"defect_findings\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(defectFindingType, defectFindingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(defectFindingType, defectFindingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert defect_findings")
	}

	if !cached {
		defectFindingUpsertCacheMut.Lock()
		defectFindingUpsertCache[key] = cache
		defectFindingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DefectFinding record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DefectFinding) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no DefectFinding provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), defectFindingPrimaryKeyMapping)
	sql := "DELETE FROM \"defect_findings\" WHERE \"analysis_id\"=$1 AND \"defect_type_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from defect_findings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for defect_findings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q defectFindingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no defectFindingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from defect_findings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for defect_findings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DefectFindingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(defectFindingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), defectFindingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"defect_findings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, defectFindingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from defectFinding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for defect_findings")
	}

	if len(defectFindingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DefectFinding) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDefectFinding(ctx, exec, o.AnalysisID, o.DefectTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DefectFindingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DefectFindingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), defectFindingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"defect_findings\".* FROM \"defect_findings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, defectFindingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in DefectFindingSlice")
	}

	*o = slice

	return nil
}

// DefectFindingExists checks if the DefectFinding row exists.
func DefectFindingExists(ctx context.Context, exec boil.ContextExecutor, analysisID int, defectTypeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"defect_findings\" where \"analysis_id\"=$1 AND \"defect_type_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, analysisID, defectTypeID)
	}
	row := exec.QueryRowContext(ctx, sql, analysisID, defectTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if defect_findings exists")
	}

	return exists, nil
}

// Exists checks if the DefectFinding row exists.
func (o *DefectFinding) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DefectFindingExists(ctx, exec, o.AnalysisID, o.DefectTypeID)
}
