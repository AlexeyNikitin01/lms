// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LecturesAi is an object representing the database table.
type LecturesAi struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Author      string      `boil:"author" json:"author" toml:"author" yaml:"author"`
	Content     string      `boil:"content" json:"content" toml:"content" yaml:"content"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *lecturesAiR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lecturesAiL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LecturesAiColumns = struct {
	ID          string
	Title       string
	Author      string
	Content     string
	Description string
	CreatedAt   string
}{
	ID:          "id",
	Title:       "title",
	Author:      "author",
	Content:     "content",
	Description: "description",
	CreatedAt:   "created_at",
}

var LecturesAiTableColumns = struct {
	ID          string
	Title       string
	Author      string
	Content     string
	Description string
	CreatedAt   string
}{
	ID:          "lectures_ai.id",
	Title:       "lectures_ai.title",
	Author:      "lectures_ai.author",
	Content:     "lectures_ai.content",
	Description: "lectures_ai.description",
	CreatedAt:   "lectures_ai.created_at",
}

// Generated where

var LecturesAiWhere = struct {
	ID          whereHelperint
	Title       whereHelperstring
	Author      whereHelperstring
	Content     whereHelperstring
	Description whereHelpernull_String
	CreatedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "\"lectures_ai\".\"id\""},
	Title:       whereHelperstring{field: "\"lectures_ai\".\"title\""},
	Author:      whereHelperstring{field: "\"lectures_ai\".\"author\""},
	Content:     whereHelperstring{field: "\"lectures_ai\".\"content\""},
	Description: whereHelpernull_String{field: "\"lectures_ai\".\"description\""},
	CreatedAt:   whereHelpernull_Time{field: "\"lectures_ai\".\"created_at\""},
}

// LecturesAiRels is where relationship names are stored.
var LecturesAiRels = struct {
	LectureAnalysisResults string
}{
	LectureAnalysisResults: "LectureAnalysisResults",
}

// lecturesAiR is where relationships are stored.
type lecturesAiR struct {
	LectureAnalysisResults AnalysisResultSlice `boil:"LectureAnalysisResults" json:"LectureAnalysisResults" toml:"LectureAnalysisResults" yaml:"LectureAnalysisResults"`
}

// NewStruct creates a new relationship struct
func (*lecturesAiR) NewStruct() *lecturesAiR {
	return &lecturesAiR{}
}

func (r *lecturesAiR) GetLectureAnalysisResults() AnalysisResultSlice {
	if r == nil {
		return nil
	}
	return r.LectureAnalysisResults
}

// lecturesAiL is where Load methods for each relationship are stored.
type lecturesAiL struct{}

var (
	lecturesAiAllColumns            = []string{"id", "title", "author", "content", "description", "created_at"}
	lecturesAiColumnsWithoutDefault = []string{"title", "author", "content"}
	lecturesAiColumnsWithDefault    = []string{"id", "description", "created_at"}
	lecturesAiPrimaryKeyColumns     = []string{"id"}
	lecturesAiGeneratedColumns      = []string{}
)

type (
	// LecturesAiSlice is an alias for a slice of pointers to LecturesAi.
	// This should almost always be used instead of []LecturesAi.
	LecturesAiSlice []*LecturesAi
	// LecturesAiHook is the signature for custom LecturesAi hook methods
	LecturesAiHook func(context.Context, boil.ContextExecutor, *LecturesAi) error

	lecturesAiQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lecturesAiType                 = reflect.TypeOf(&LecturesAi{})
	lecturesAiMapping              = queries.MakeStructMapping(lecturesAiType)
	lecturesAiPrimaryKeyMapping, _ = queries.BindMapping(lecturesAiType, lecturesAiMapping, lecturesAiPrimaryKeyColumns)
	lecturesAiInsertCacheMut       sync.RWMutex
	lecturesAiInsertCache          = make(map[string]insertCache)
	lecturesAiUpdateCacheMut       sync.RWMutex
	lecturesAiUpdateCache          = make(map[string]updateCache)
	lecturesAiUpsertCacheMut       sync.RWMutex
	lecturesAiUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lecturesAiAfterSelectMu sync.Mutex
var lecturesAiAfterSelectHooks []LecturesAiHook

var lecturesAiBeforeInsertMu sync.Mutex
var lecturesAiBeforeInsertHooks []LecturesAiHook
var lecturesAiAfterInsertMu sync.Mutex
var lecturesAiAfterInsertHooks []LecturesAiHook

var lecturesAiBeforeUpdateMu sync.Mutex
var lecturesAiBeforeUpdateHooks []LecturesAiHook
var lecturesAiAfterUpdateMu sync.Mutex
var lecturesAiAfterUpdateHooks []LecturesAiHook

var lecturesAiBeforeDeleteMu sync.Mutex
var lecturesAiBeforeDeleteHooks []LecturesAiHook
var lecturesAiAfterDeleteMu sync.Mutex
var lecturesAiAfterDeleteHooks []LecturesAiHook

var lecturesAiBeforeUpsertMu sync.Mutex
var lecturesAiBeforeUpsertHooks []LecturesAiHook
var lecturesAiAfterUpsertMu sync.Mutex
var lecturesAiAfterUpsertHooks []LecturesAiHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LecturesAi) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lecturesAiAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LecturesAi) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lecturesAiBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LecturesAi) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lecturesAiAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LecturesAi) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lecturesAiBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LecturesAi) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lecturesAiAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LecturesAi) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lecturesAiBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LecturesAi) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lecturesAiAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LecturesAi) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lecturesAiBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LecturesAi) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lecturesAiAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLecturesAiHook registers your hook function for all future operations.
func AddLecturesAiHook(hookPoint boil.HookPoint, lecturesAiHook LecturesAiHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		lecturesAiAfterSelectMu.Lock()
		lecturesAiAfterSelectHooks = append(lecturesAiAfterSelectHooks, lecturesAiHook)
		lecturesAiAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		lecturesAiBeforeInsertMu.Lock()
		lecturesAiBeforeInsertHooks = append(lecturesAiBeforeInsertHooks, lecturesAiHook)
		lecturesAiBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		lecturesAiAfterInsertMu.Lock()
		lecturesAiAfterInsertHooks = append(lecturesAiAfterInsertHooks, lecturesAiHook)
		lecturesAiAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		lecturesAiBeforeUpdateMu.Lock()
		lecturesAiBeforeUpdateHooks = append(lecturesAiBeforeUpdateHooks, lecturesAiHook)
		lecturesAiBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		lecturesAiAfterUpdateMu.Lock()
		lecturesAiAfterUpdateHooks = append(lecturesAiAfterUpdateHooks, lecturesAiHook)
		lecturesAiAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		lecturesAiBeforeDeleteMu.Lock()
		lecturesAiBeforeDeleteHooks = append(lecturesAiBeforeDeleteHooks, lecturesAiHook)
		lecturesAiBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		lecturesAiAfterDeleteMu.Lock()
		lecturesAiAfterDeleteHooks = append(lecturesAiAfterDeleteHooks, lecturesAiHook)
		lecturesAiAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		lecturesAiBeforeUpsertMu.Lock()
		lecturesAiBeforeUpsertHooks = append(lecturesAiBeforeUpsertHooks, lecturesAiHook)
		lecturesAiBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		lecturesAiAfterUpsertMu.Lock()
		lecturesAiAfterUpsertHooks = append(lecturesAiAfterUpsertHooks, lecturesAiHook)
		lecturesAiAfterUpsertMu.Unlock()
	}
}

// One returns a single lecturesAi record from the query.
func (q lecturesAiQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LecturesAi, error) {
	o := &LecturesAi{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for lectures_ai")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LecturesAi records from the query.
func (q lecturesAiQuery) All(ctx context.Context, exec boil.ContextExecutor) (LecturesAiSlice, error) {
	var o []*LecturesAi

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to LecturesAi slice")
	}

	if len(lecturesAiAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LecturesAi records in the query.
func (q lecturesAiQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count lectures_ai rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lecturesAiQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if lectures_ai exists")
	}

	return count > 0, nil
}

// LectureAnalysisResults retrieves all the analysis_result's AnalysisResults with an executor via lecture_id column.
func (o *LecturesAi) LectureAnalysisResults(mods ...qm.QueryMod) analysisResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"analysis_results\".\"lecture_id\"=?", o.ID),
	)

	return AnalysisResults(queryMods...)
}

// LoadLectureAnalysisResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lecturesAiL) LoadLectureAnalysisResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLecturesAi interface{}, mods queries.Applicator) error {
	var slice []*LecturesAi
	var object *LecturesAi

	if singular {
		var ok bool
		object, ok = maybeLecturesAi.(*LecturesAi)
		if !ok {
			object = new(LecturesAi)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLecturesAi)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLecturesAi))
			}
		}
	} else {
		s, ok := maybeLecturesAi.(*[]*LecturesAi)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLecturesAi)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLecturesAi))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &lecturesAiR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lecturesAiR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`analysis_results`),
		qm.WhereIn(`analysis_results.lecture_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load analysis_results")
	}

	var resultSlice []*AnalysisResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice analysis_results")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on analysis_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for analysis_results")
	}

	if len(analysisResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LectureAnalysisResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &analysisResultR{}
			}
			foreign.R.Lecture = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LectureID) {
				local.R.LectureAnalysisResults = append(local.R.LectureAnalysisResults, foreign)
				if foreign.R == nil {
					foreign.R = &analysisResultR{}
				}
				foreign.R.Lecture = local
				break
			}
		}
	}

	return nil
}

// AddLectureAnalysisResults adds the given related objects to the existing relationships
// of the lectures_ai, optionally inserting them as new records.
// Appends related to o.R.LectureAnalysisResults.
// Sets related.R.Lecture appropriately.
func (o *LecturesAi) AddLectureAnalysisResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AnalysisResult) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LectureID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"analysis_results\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lecture_id"}),
				strmangle.WhereClause("\"", "\"", 2, analysisResultPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LectureID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &lecturesAiR{
			LectureAnalysisResults: related,
		}
	} else {
		o.R.LectureAnalysisResults = append(o.R.LectureAnalysisResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &analysisResultR{
				Lecture: o,
			}
		} else {
			rel.R.Lecture = o
		}
	}
	return nil
}

// SetLectureAnalysisResults removes all previously related items of the
// lectures_ai replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Lecture's LectureAnalysisResults accordingly.
// Replaces o.R.LectureAnalysisResults with related.
// Sets related.R.Lecture's LectureAnalysisResults accordingly.
func (o *LecturesAi) SetLectureAnalysisResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AnalysisResult) error {
	query := "update \"analysis_results\" set \"lecture_id\" = null where \"lecture_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LectureAnalysisResults {
			queries.SetScanner(&rel.LectureID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Lecture = nil
		}
		o.R.LectureAnalysisResults = nil
	}

	return o.AddLectureAnalysisResults(ctx, exec, insert, related...)
}

// RemoveLectureAnalysisResults relationships from objects passed in.
// Removes related items from R.LectureAnalysisResults (uses pointer comparison, removal does not keep order)
// Sets related.R.Lecture.
func (o *LecturesAi) RemoveLectureAnalysisResults(ctx context.Context, exec boil.ContextExecutor, related ...*AnalysisResult) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LectureID, nil)
		if rel.R != nil {
			rel.R.Lecture = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("lecture_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LectureAnalysisResults {
			if rel != ri {
				continue
			}

			ln := len(o.R.LectureAnalysisResults)
			if ln > 1 && i < ln-1 {
				o.R.LectureAnalysisResults[i] = o.R.LectureAnalysisResults[ln-1]
			}
			o.R.LectureAnalysisResults = o.R.LectureAnalysisResults[:ln-1]
			break
		}
	}

	return nil
}

// LecturesAis retrieves all the records using an executor.
func LecturesAis(mods ...qm.QueryMod) lecturesAiQuery {
	mods = append(mods, qm.From("\"lectures_ai\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"lectures_ai\".*"})
	}

	return lecturesAiQuery{q}
}

// FindLecturesAi retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLecturesAi(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*LecturesAi, error) {
	lecturesAiObj := &LecturesAi{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lectures_ai\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lecturesAiObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from lectures_ai")
	}

	if err = lecturesAiObj.doAfterSelectHooks(ctx, exec); err != nil {
		return lecturesAiObj, err
	}

	return lecturesAiObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LecturesAi) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no lectures_ai provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lecturesAiColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lecturesAiInsertCacheMut.RLock()
	cache, cached := lecturesAiInsertCache[key]
	lecturesAiInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lecturesAiAllColumns,
			lecturesAiColumnsWithDefault,
			lecturesAiColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lecturesAiType, lecturesAiMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lecturesAiType, lecturesAiMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lectures_ai\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lectures_ai\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into lectures_ai")
	}

	if !cached {
		lecturesAiInsertCacheMut.Lock()
		lecturesAiInsertCache[key] = cache
		lecturesAiInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LecturesAi.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LecturesAi) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lecturesAiUpdateCacheMut.RLock()
	cache, cached := lecturesAiUpdateCache[key]
	lecturesAiUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lecturesAiAllColumns,
			lecturesAiPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update lectures_ai, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lectures_ai\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, lecturesAiPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lecturesAiType, lecturesAiMapping, append(wl, lecturesAiPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update lectures_ai row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for lectures_ai")
	}

	if !cached {
		lecturesAiUpdateCacheMut.Lock()
		lecturesAiUpdateCache[key] = cache
		lecturesAiUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lecturesAiQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for lectures_ai")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for lectures_ai")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LecturesAiSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lecturesAiPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lectures_ai\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, lecturesAiPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in lecturesAi slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all lecturesAi")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LecturesAi) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no lectures_ai provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lecturesAiColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lecturesAiUpsertCacheMut.RLock()
	cache, cached := lecturesAiUpsertCache[key]
	lecturesAiUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			lecturesAiAllColumns,
			lecturesAiColumnsWithDefault,
			lecturesAiColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			lecturesAiAllColumns,
			lecturesAiPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert lectures_ai, could not build update column list")
		}

		ret := strmangle.SetComplement(lecturesAiAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(lecturesAiPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert lectures_ai, could not build conflict column list")
			}

			conflict = make([]string, len(lecturesAiPrimaryKeyColumns))
			copy(conflict, lecturesAiPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lectures_ai\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(lecturesAiType, lecturesAiMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lecturesAiType, lecturesAiMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert lectures_ai")
	}

	if !cached {
		lecturesAiUpsertCacheMut.Lock()
		lecturesAiUpsertCache[key] = cache
		lecturesAiUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LecturesAi record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LecturesAi) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no LecturesAi provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lecturesAiPrimaryKeyMapping)
	sql := "DELETE FROM \"lectures_ai\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from lectures_ai")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for lectures_ai")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lecturesAiQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no lecturesAiQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from lectures_ai")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for lectures_ai")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LecturesAiSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lecturesAiBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lecturesAiPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"lectures_ai\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lecturesAiPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from lecturesAi slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for lectures_ai")
	}

	if len(lecturesAiAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LecturesAi) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLecturesAi(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LecturesAiSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LecturesAiSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lecturesAiPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lectures_ai\".* FROM \"lectures_ai\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lecturesAiPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in LecturesAiSlice")
	}

	*o = slice

	return nil
}

// LecturesAiExists checks if the LecturesAi row exists.
func LecturesAiExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lectures_ai\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if lectures_ai exists")
	}

	return exists, nil
}

// Exists checks if the LecturesAi row exists.
func (o *LecturesAi) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LecturesAiExists(ctx, exec, o.ID)
}
