// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Lecture is an object representing the database table.
type Lecture struct {
	ID       int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title    string `boil:"title" json:"title" toml:"title" yaml:"title"`
	ModuleID int64  `boil:"module_id" json:"module_id" toml:"module_id" yaml:"module_id"`
	Lecture  string `boil:"lecture" json:"lecture" toml:"lecture" yaml:"lecture"`

	R *lectureR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lectureL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LectureColumns = struct {
	ID       string
	Title    string
	ModuleID string
	Lecture  string
}{
	ID:       "id",
	Title:    "title",
	ModuleID: "module_id",
	Lecture:  "lecture",
}

var LectureTableColumns = struct {
	ID       string
	Title    string
	ModuleID string
	Lecture  string
}{
	ID:       "lectures.id",
	Title:    "lectures.title",
	ModuleID: "lectures.module_id",
	Lecture:  "lectures.lecture",
}

// Generated where

var LectureWhere = struct {
	ID       whereHelperint64
	Title    whereHelperstring
	ModuleID whereHelperint64
	Lecture  whereHelperstring
}{
	ID:       whereHelperint64{field: "\"lectures\".\"id\""},
	Title:    whereHelperstring{field: "\"lectures\".\"title\""},
	ModuleID: whereHelperint64{field: "\"lectures\".\"module_id\""},
	Lecture:  whereHelperstring{field: "\"lectures\".\"lecture\""},
}

// LectureRels is where relationship names are stored.
var LectureRels = struct {
	Module string
	Tests  string
}{
	Module: "Module",
	Tests:  "Tests",
}

// lectureR is where relationships are stored.
type lectureR struct {
	Module *Module   `boil:"Module" json:"Module" toml:"Module" yaml:"Module"`
	Tests  TestSlice `boil:"Tests" json:"Tests" toml:"Tests" yaml:"Tests"`
}

// NewStruct creates a new relationship struct
func (*lectureR) NewStruct() *lectureR {
	return &lectureR{}
}

func (r *lectureR) GetModule() *Module {
	if r == nil {
		return nil
	}
	return r.Module
}

func (r *lectureR) GetTests() TestSlice {
	if r == nil {
		return nil
	}
	return r.Tests
}

// lectureL is where Load methods for each relationship are stored.
type lectureL struct{}

var (
	lectureAllColumns            = []string{"id", "title", "module_id", "lecture"}
	lectureColumnsWithoutDefault = []string{"title", "module_id", "lecture"}
	lectureColumnsWithDefault    = []string{"id"}
	lecturePrimaryKeyColumns     = []string{"id"}
	lectureGeneratedColumns      = []string{"id"}
)

type (
	// LectureSlice is an alias for a slice of pointers to Lecture.
	// This should almost always be used instead of []Lecture.
	LectureSlice []*Lecture
	// LectureHook is the signature for custom Lecture hook methods
	LectureHook func(context.Context, boil.ContextExecutor, *Lecture) error

	lectureQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lectureType                 = reflect.TypeOf(&Lecture{})
	lectureMapping              = queries.MakeStructMapping(lectureType)
	lecturePrimaryKeyMapping, _ = queries.BindMapping(lectureType, lectureMapping, lecturePrimaryKeyColumns)
	lectureInsertCacheMut       sync.RWMutex
	lectureInsertCache          = make(map[string]insertCache)
	lectureUpdateCacheMut       sync.RWMutex
	lectureUpdateCache          = make(map[string]updateCache)
	lectureUpsertCacheMut       sync.RWMutex
	lectureUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lectureAfterSelectMu sync.Mutex
var lectureAfterSelectHooks []LectureHook

var lectureBeforeInsertMu sync.Mutex
var lectureBeforeInsertHooks []LectureHook
var lectureAfterInsertMu sync.Mutex
var lectureAfterInsertHooks []LectureHook

var lectureBeforeUpdateMu sync.Mutex
var lectureBeforeUpdateHooks []LectureHook
var lectureAfterUpdateMu sync.Mutex
var lectureAfterUpdateHooks []LectureHook

var lectureBeforeDeleteMu sync.Mutex
var lectureBeforeDeleteHooks []LectureHook
var lectureAfterDeleteMu sync.Mutex
var lectureAfterDeleteHooks []LectureHook

var lectureBeforeUpsertMu sync.Mutex
var lectureBeforeUpsertHooks []LectureHook
var lectureAfterUpsertMu sync.Mutex
var lectureAfterUpsertHooks []LectureHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Lecture) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lectureAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Lecture) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lectureBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Lecture) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lectureAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Lecture) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lectureBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Lecture) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lectureAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Lecture) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lectureBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Lecture) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lectureAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Lecture) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lectureBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Lecture) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lectureAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLectureHook registers your hook function for all future operations.
func AddLectureHook(hookPoint boil.HookPoint, lectureHook LectureHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		lectureAfterSelectMu.Lock()
		lectureAfterSelectHooks = append(lectureAfterSelectHooks, lectureHook)
		lectureAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		lectureBeforeInsertMu.Lock()
		lectureBeforeInsertHooks = append(lectureBeforeInsertHooks, lectureHook)
		lectureBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		lectureAfterInsertMu.Lock()
		lectureAfterInsertHooks = append(lectureAfterInsertHooks, lectureHook)
		lectureAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		lectureBeforeUpdateMu.Lock()
		lectureBeforeUpdateHooks = append(lectureBeforeUpdateHooks, lectureHook)
		lectureBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		lectureAfterUpdateMu.Lock()
		lectureAfterUpdateHooks = append(lectureAfterUpdateHooks, lectureHook)
		lectureAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		lectureBeforeDeleteMu.Lock()
		lectureBeforeDeleteHooks = append(lectureBeforeDeleteHooks, lectureHook)
		lectureBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		lectureAfterDeleteMu.Lock()
		lectureAfterDeleteHooks = append(lectureAfterDeleteHooks, lectureHook)
		lectureAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		lectureBeforeUpsertMu.Lock()
		lectureBeforeUpsertHooks = append(lectureBeforeUpsertHooks, lectureHook)
		lectureBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		lectureAfterUpsertMu.Lock()
		lectureAfterUpsertHooks = append(lectureAfterUpsertHooks, lectureHook)
		lectureAfterUpsertMu.Unlock()
	}
}

// One returns a single lecture record from the query.
func (q lectureQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Lecture, error) {
	o := &Lecture{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for lectures")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Lecture records from the query.
func (q lectureQuery) All(ctx context.Context, exec boil.ContextExecutor) (LectureSlice, error) {
	var o []*Lecture

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Lecture slice")
	}

	if len(lectureAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Lecture records in the query.
func (q lectureQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count lectures rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lectureQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if lectures exists")
	}

	return count > 0, nil
}

// Module pointed to by the foreign key.
func (o *Lecture) Module(mods ...qm.QueryMod) moduleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ModuleID),
	}

	queryMods = append(queryMods, mods...)

	return Modules(queryMods...)
}

// Tests retrieves all the test's Tests with an executor.
func (o *Lecture) Tests(mods ...qm.QueryMod) testQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tests\".\"lecture_id\"=?", o.ID),
	)

	return Tests(queryMods...)
}

// LoadModule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lectureL) LoadModule(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLecture interface{}, mods queries.Applicator) error {
	var slice []*Lecture
	var object *Lecture

	if singular {
		var ok bool
		object, ok = maybeLecture.(*Lecture)
		if !ok {
			object = new(Lecture)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLecture)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLecture))
			}
		}
	} else {
		s, ok := maybeLecture.(*[]*Lecture)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLecture)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLecture))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &lectureR{}
		}
		args[object.ModuleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lectureR{}
			}

			args[obj.ModuleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`modules`),
		qm.WhereIn(`modules.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Module")
	}

	var resultSlice []*Module
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Module")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for modules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for modules")
	}

	if len(moduleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Module = foreign
		if foreign.R == nil {
			foreign.R = &moduleR{}
		}
		foreign.R.Lectures = append(foreign.R.Lectures, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModuleID == foreign.ID {
				local.R.Module = foreign
				if foreign.R == nil {
					foreign.R = &moduleR{}
				}
				foreign.R.Lectures = append(foreign.R.Lectures, local)
				break
			}
		}
	}

	return nil
}

// LoadTests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lectureL) LoadTests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLecture interface{}, mods queries.Applicator) error {
	var slice []*Lecture
	var object *Lecture

	if singular {
		var ok bool
		object, ok = maybeLecture.(*Lecture)
		if !ok {
			object = new(Lecture)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLecture)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLecture))
			}
		}
	} else {
		s, ok := maybeLecture.(*[]*Lecture)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLecture)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLecture))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &lectureR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lectureR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tests`),
		qm.WhereIn(`tests.lecture_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tests")
	}

	var resultSlice []*Test
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tests")
	}

	if len(testAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &testR{}
			}
			foreign.R.Lecture = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LectureID {
				local.R.Tests = append(local.R.Tests, foreign)
				if foreign.R == nil {
					foreign.R = &testR{}
				}
				foreign.R.Lecture = local
				break
			}
		}
	}

	return nil
}

// SetModule of the lecture to the related item.
// Sets o.R.Module to related.
// Adds o to related.R.Lectures.
func (o *Lecture) SetModule(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Module) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"lectures\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"module_id"}),
		strmangle.WhereClause("\"", "\"", 2, lecturePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModuleID = related.ID
	if o.R == nil {
		o.R = &lectureR{
			Module: related,
		}
	} else {
		o.R.Module = related
	}

	if related.R == nil {
		related.R = &moduleR{
			Lectures: LectureSlice{o},
		}
	} else {
		related.R.Lectures = append(related.R.Lectures, o)
	}

	return nil
}

// AddTests adds the given related objects to the existing relationships
// of the lecture, optionally inserting them as new records.
// Appends related to o.R.Tests.
// Sets related.R.Lecture appropriately.
func (o *Lecture) AddTests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Test) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LectureID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lecture_id"}),
				strmangle.WhereClause("\"", "\"", 2, testPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LectureID = o.ID
		}
	}

	if o.R == nil {
		o.R = &lectureR{
			Tests: related,
		}
	} else {
		o.R.Tests = append(o.R.Tests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &testR{
				Lecture: o,
			}
		} else {
			rel.R.Lecture = o
		}
	}
	return nil
}

// Lectures retrieves all the records using an executor.
func Lectures(mods ...qm.QueryMod) lectureQuery {
	mods = append(mods, qm.From("\"lectures\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"lectures\".*"})
	}

	return lectureQuery{q}
}

// FindLecture retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLecture(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Lecture, error) {
	lectureObj := &Lecture{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lectures\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lectureObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from lectures")
	}

	if err = lectureObj.doAfterSelectHooks(ctx, exec); err != nil {
		return lectureObj, err
	}

	return lectureObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Lecture) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no lectures provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lectureColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lectureInsertCacheMut.RLock()
	cache, cached := lectureInsertCache[key]
	lectureInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lectureAllColumns,
			lectureColumnsWithDefault,
			lectureColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, lectureGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(lectureType, lectureMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lectureType, lectureMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lectures\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lectures\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into lectures")
	}

	if !cached {
		lectureInsertCacheMut.Lock()
		lectureInsertCache[key] = cache
		lectureInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Lecture.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Lecture) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lectureUpdateCacheMut.RLock()
	cache, cached := lectureUpdateCache[key]
	lectureUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lectureAllColumns,
			lecturePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, lectureGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update lectures, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lectures\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, lecturePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lectureType, lectureMapping, append(wl, lecturePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update lectures row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for lectures")
	}

	if !cached {
		lectureUpdateCacheMut.Lock()
		lectureUpdateCache[key] = cache
		lectureUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lectureQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for lectures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for lectures")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LectureSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lecturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lectures\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, lecturePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in lecture slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all lecture")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Lecture) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no lectures provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lectureColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lectureUpsertCacheMut.RLock()
	cache, cached := lectureUpsertCache[key]
	lectureUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			lectureAllColumns,
			lectureColumnsWithDefault,
			lectureColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			lectureAllColumns,
			lecturePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, lectureGeneratedColumns)
		update = strmangle.SetComplement(update, lectureGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert lectures, could not build update column list")
		}

		ret := strmangle.SetComplement(lectureAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(lecturePrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert lectures, could not build conflict column list")
			}

			conflict = make([]string, len(lecturePrimaryKeyColumns))
			copy(conflict, lecturePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lectures\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(lectureType, lectureMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lectureType, lectureMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert lectures")
	}

	if !cached {
		lectureUpsertCacheMut.Lock()
		lectureUpsertCache[key] = cache
		lectureUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Lecture record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Lecture) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Lecture provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lecturePrimaryKeyMapping)
	sql := "DELETE FROM \"lectures\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from lectures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for lectures")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lectureQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no lectureQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from lectures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for lectures")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LectureSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lectureBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lecturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"lectures\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, lecturePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from lecture slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for lectures")
	}

	if len(lectureAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Lecture) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLecture(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LectureSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LectureSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lecturePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lectures\".* FROM \"lectures\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lecturePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in LectureSlice")
	}

	*o = slice

	return nil
}

// LectureExists checks if the Lecture row exists.
func LectureExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lectures\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if lectures exists")
	}

	return exists, nil
}

// Exists checks if the Lecture row exists.
func (o *Lecture) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LectureExists(ctx, exec, o.ID)
}
