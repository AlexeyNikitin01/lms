// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsersCourse is an object representing the database table.
type UsersCourse struct {
	ID       int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserRole string `boil:"user_role" json:"user_role" toml:"user_role" yaml:"user_role"`
	UserUUID string `boil:"user_uuid" json:"user_uuid" toml:"user_uuid" yaml:"user_uuid"`
	CourseID int64  `boil:"course_id" json:"course_id" toml:"course_id" yaml:"course_id"`

	R *usersCourseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usersCourseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsersCourseColumns = struct {
	ID       string
	UserRole string
	UserUUID string
	CourseID string
}{
	ID:       "id",
	UserRole: "user_role",
	UserUUID: "user_uuid",
	CourseID: "course_id",
}

var UsersCourseTableColumns = struct {
	ID       string
	UserRole string
	UserUUID string
	CourseID string
}{
	ID:       "users_courses.id",
	UserRole: "users_courses.user_role",
	UserUUID: "users_courses.user_uuid",
	CourseID: "users_courses.course_id",
}

// Generated where

var UsersCourseWhere = struct {
	ID       whereHelperint64
	UserRole whereHelperstring
	UserUUID whereHelperstring
	CourseID whereHelperint64
}{
	ID:       whereHelperint64{field: "\"users_courses\".\"id\""},
	UserRole: whereHelperstring{field: "\"users_courses\".\"user_role\""},
	UserUUID: whereHelperstring{field: "\"users_courses\".\"user_uuid\""},
	CourseID: whereHelperint64{field: "\"users_courses\".\"course_id\""},
}

// UsersCourseRels is where relationship names are stored.
var UsersCourseRels = struct {
	Course string
}{
	Course: "Course",
}

// usersCourseR is where relationships are stored.
type usersCourseR struct {
	Course *Course `boil:"Course" json:"Course" toml:"Course" yaml:"Course"`
}

// NewStruct creates a new relationship struct
func (*usersCourseR) NewStruct() *usersCourseR {
	return &usersCourseR{}
}

func (r *usersCourseR) GetCourse() *Course {
	if r == nil {
		return nil
	}
	return r.Course
}

// usersCourseL is where Load methods for each relationship are stored.
type usersCourseL struct{}

var (
	usersCourseAllColumns            = []string{"id", "user_role", "user_uuid", "course_id"}
	usersCourseColumnsWithoutDefault = []string{"user_role", "user_uuid", "course_id"}
	usersCourseColumnsWithDefault    = []string{"id"}
	usersCoursePrimaryKeyColumns     = []string{"id"}
	usersCourseGeneratedColumns      = []string{}
)

type (
	// UsersCourseSlice is an alias for a slice of pointers to UsersCourse.
	// This should almost always be used instead of []UsersCourse.
	UsersCourseSlice []*UsersCourse
	// UsersCourseHook is the signature for custom UsersCourse hook methods
	UsersCourseHook func(context.Context, boil.ContextExecutor, *UsersCourse) error

	usersCourseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersCourseType                 = reflect.TypeOf(&UsersCourse{})
	usersCourseMapping              = queries.MakeStructMapping(usersCourseType)
	usersCoursePrimaryKeyMapping, _ = queries.BindMapping(usersCourseType, usersCourseMapping, usersCoursePrimaryKeyColumns)
	usersCourseInsertCacheMut       sync.RWMutex
	usersCourseInsertCache          = make(map[string]insertCache)
	usersCourseUpdateCacheMut       sync.RWMutex
	usersCourseUpdateCache          = make(map[string]updateCache)
	usersCourseUpsertCacheMut       sync.RWMutex
	usersCourseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usersCourseAfterSelectMu sync.Mutex
var usersCourseAfterSelectHooks []UsersCourseHook

var usersCourseBeforeInsertMu sync.Mutex
var usersCourseBeforeInsertHooks []UsersCourseHook
var usersCourseAfterInsertMu sync.Mutex
var usersCourseAfterInsertHooks []UsersCourseHook

var usersCourseBeforeUpdateMu sync.Mutex
var usersCourseBeforeUpdateHooks []UsersCourseHook
var usersCourseAfterUpdateMu sync.Mutex
var usersCourseAfterUpdateHooks []UsersCourseHook

var usersCourseBeforeDeleteMu sync.Mutex
var usersCourseBeforeDeleteHooks []UsersCourseHook
var usersCourseAfterDeleteMu sync.Mutex
var usersCourseAfterDeleteHooks []UsersCourseHook

var usersCourseBeforeUpsertMu sync.Mutex
var usersCourseBeforeUpsertHooks []UsersCourseHook
var usersCourseAfterUpsertMu sync.Mutex
var usersCourseAfterUpsertHooks []UsersCourseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersCourse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCourseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsersCourse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCourseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsersCourse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCourseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsersCourse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCourseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsersCourse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCourseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsersCourse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCourseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsersCourse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCourseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsersCourse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCourseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsersCourse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersCourseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersCourseHook registers your hook function for all future operations.
func AddUsersCourseHook(hookPoint boil.HookPoint, usersCourseHook UsersCourseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usersCourseAfterSelectMu.Lock()
		usersCourseAfterSelectHooks = append(usersCourseAfterSelectHooks, usersCourseHook)
		usersCourseAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		usersCourseBeforeInsertMu.Lock()
		usersCourseBeforeInsertHooks = append(usersCourseBeforeInsertHooks, usersCourseHook)
		usersCourseBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		usersCourseAfterInsertMu.Lock()
		usersCourseAfterInsertHooks = append(usersCourseAfterInsertHooks, usersCourseHook)
		usersCourseAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		usersCourseBeforeUpdateMu.Lock()
		usersCourseBeforeUpdateHooks = append(usersCourseBeforeUpdateHooks, usersCourseHook)
		usersCourseBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		usersCourseAfterUpdateMu.Lock()
		usersCourseAfterUpdateHooks = append(usersCourseAfterUpdateHooks, usersCourseHook)
		usersCourseAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		usersCourseBeforeDeleteMu.Lock()
		usersCourseBeforeDeleteHooks = append(usersCourseBeforeDeleteHooks, usersCourseHook)
		usersCourseBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		usersCourseAfterDeleteMu.Lock()
		usersCourseAfterDeleteHooks = append(usersCourseAfterDeleteHooks, usersCourseHook)
		usersCourseAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		usersCourseBeforeUpsertMu.Lock()
		usersCourseBeforeUpsertHooks = append(usersCourseBeforeUpsertHooks, usersCourseHook)
		usersCourseBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		usersCourseAfterUpsertMu.Lock()
		usersCourseAfterUpsertHooks = append(usersCourseAfterUpsertHooks, usersCourseHook)
		usersCourseAfterUpsertMu.Unlock()
	}
}

// One returns a single usersCourse record from the query.
func (q usersCourseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersCourse, error) {
	o := &UsersCourse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for users_courses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsersCourse records from the query.
func (q usersCourseQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersCourseSlice, error) {
	var o []*UsersCourse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to UsersCourse slice")
	}

	if len(usersCourseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsersCourse records in the query.
func (q usersCourseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count users_courses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usersCourseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if users_courses exists")
	}

	return count > 0, nil
}

// Course pointed to by the foreign key.
func (o *UsersCourse) Course(mods ...qm.QueryMod) courseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CourseID),
	}

	queryMods = append(queryMods, mods...)

	return Courses(queryMods...)
}

// LoadCourse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersCourseL) LoadCourse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersCourse interface{}, mods queries.Applicator) error {
	var slice []*UsersCourse
	var object *UsersCourse

	if singular {
		var ok bool
		object, ok = maybeUsersCourse.(*UsersCourse)
		if !ok {
			object = new(UsersCourse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersCourse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersCourse))
			}
		}
	} else {
		s, ok := maybeUsersCourse.(*[]*UsersCourse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersCourse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersCourse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersCourseR{}
		}
		args[object.CourseID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersCourseR{}
			}

			args[obj.CourseID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`courses`),
		qm.WhereIn(`courses.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Course")
	}

	var resultSlice []*Course
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for courses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for courses")
	}

	if len(courseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Course = foreign
		if foreign.R == nil {
			foreign.R = &courseR{}
		}
		foreign.R.UsersCourses = append(foreign.R.UsersCourses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CourseID == foreign.ID {
				local.R.Course = foreign
				if foreign.R == nil {
					foreign.R = &courseR{}
				}
				foreign.R.UsersCourses = append(foreign.R.UsersCourses, local)
				break
			}
		}
	}

	return nil
}

// SetCourse of the usersCourse to the related item.
// Sets o.R.Course to related.
// Adds o to related.R.UsersCourses.
func (o *UsersCourse) SetCourse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Course) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users_courses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"course_id"}),
		strmangle.WhereClause("\"", "\"", 2, usersCoursePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CourseID = related.ID
	if o.R == nil {
		o.R = &usersCourseR{
			Course: related,
		}
	} else {
		o.R.Course = related
	}

	if related.R == nil {
		related.R = &courseR{
			UsersCourses: UsersCourseSlice{o},
		}
	} else {
		related.R.UsersCourses = append(related.R.UsersCourses, o)
	}

	return nil
}

// UsersCourses retrieves all the records using an executor.
func UsersCourses(mods ...qm.QueryMod) usersCourseQuery {
	mods = append(mods, qm.From("\"users_courses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users_courses\".*"})
	}

	return usersCourseQuery{q}
}

// FindUsersCourse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsersCourse(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UsersCourse, error) {
	usersCourseObj := &UsersCourse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users_courses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usersCourseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from users_courses")
	}

	if err = usersCourseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usersCourseObj, err
	}

	return usersCourseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsersCourse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no users_courses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersCourseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usersCourseInsertCacheMut.RLock()
	cache, cached := usersCourseInsertCache[key]
	usersCourseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usersCourseAllColumns,
			usersCourseColumnsWithDefault,
			usersCourseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usersCourseType, usersCourseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usersCourseType, usersCourseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users_courses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users_courses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into users_courses")
	}

	if !cached {
		usersCourseInsertCacheMut.Lock()
		usersCourseInsertCache[key] = cache
		usersCourseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsersCourse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsersCourse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usersCourseUpdateCacheMut.RLock()
	cache, cached := usersCourseUpdateCache[key]
	usersCourseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usersCourseAllColumns,
			usersCoursePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update users_courses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users_courses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usersCoursePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usersCourseType, usersCourseMapping, append(wl, usersCoursePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update users_courses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for users_courses")
	}

	if !cached {
		usersCourseUpdateCacheMut.Lock()
		usersCourseUpdateCache[key] = cache
		usersCourseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usersCourseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for users_courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for users_courses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsersCourseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users_courses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usersCoursePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in usersCourse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all usersCourse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsersCourse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no users_courses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersCourseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usersCourseUpsertCacheMut.RLock()
	cache, cached := usersCourseUpsertCache[key]
	usersCourseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			usersCourseAllColumns,
			usersCourseColumnsWithDefault,
			usersCourseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usersCourseAllColumns,
			usersCoursePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert users_courses, could not build update column list")
		}

		ret := strmangle.SetComplement(usersCourseAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(usersCoursePrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert users_courses, could not build conflict column list")
			}

			conflict = make([]string, len(usersCoursePrimaryKeyColumns))
			copy(conflict, usersCoursePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users_courses\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(usersCourseType, usersCourseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usersCourseType, usersCourseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert users_courses")
	}

	if !cached {
		usersCourseUpsertCacheMut.Lock()
		usersCourseUpsertCache[key] = cache
		usersCourseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsersCourse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsersCourse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no UsersCourse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usersCoursePrimaryKeyMapping)
	sql := "DELETE FROM \"users_courses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from users_courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for users_courses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usersCourseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no usersCourseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from users_courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for users_courses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsersCourseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usersCourseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users_courses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersCoursePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from usersCourse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for users_courses")
	}

	if len(usersCourseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsersCourse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsersCourse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersCourseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsersCourseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users_courses\".* FROM \"users_courses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersCoursePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in UsersCourseSlice")
	}

	*o = slice

	return nil
}

// UsersCourseExists checks if the UsersCourse row exists.
func UsersCourseExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users_courses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if users_courses exists")
	}

	return exists, nil
}

// Exists checks if the UsersCourse row exists.
func (o *UsersCourse) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UsersCourseExists(ctx, exec, o.ID)
}
