// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PhotoURL is an object representing the database table.
type PhotoURL struct {
	ID     int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	URL    string `boil:"url" json:"url" toml:"url" yaml:"url"`

	R *photoURLR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L photoURLL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PhotoURLColumns = struct {
	ID     string
	UserID string
	URL    string
}{
	ID:     "id",
	UserID: "user_id",
	URL:    "url",
}

var PhotoURLTableColumns = struct {
	ID     string
	UserID string
	URL    string
}{
	ID:     "photo_url.id",
	UserID: "photo_url.user_id",
	URL:    "photo_url.url",
}

// Generated where

var PhotoURLWhere = struct {
	ID     whereHelperint64
	UserID whereHelperstring
	URL    whereHelperstring
}{
	ID:     whereHelperint64{field: "\"photo_url\".\"id\""},
	UserID: whereHelperstring{field: "\"photo_url\".\"user_id\""},
	URL:    whereHelperstring{field: "\"photo_url\".\"url\""},
}

// PhotoURLRels is where relationship names are stored.
var PhotoURLRels = struct {
	User string
}{
	User: "User",
}

// photoURLR is where relationships are stored.
type photoURLR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*photoURLR) NewStruct() *photoURLR {
	return &photoURLR{}
}

func (r *photoURLR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// photoURLL is where Load methods for each relationship are stored.
type photoURLL struct{}

var (
	photoURLAllColumns            = []string{"id", "user_id", "url"}
	photoURLColumnsWithoutDefault = []string{"user_id", "url"}
	photoURLColumnsWithDefault    = []string{"id"}
	photoURLPrimaryKeyColumns     = []string{"id"}
	photoURLGeneratedColumns      = []string{"id"}
)

type (
	// PhotoURLSlice is an alias for a slice of pointers to PhotoURL.
	// This should almost always be used instead of []PhotoURL.
	PhotoURLSlice []*PhotoURL
	// PhotoURLHook is the signature for custom PhotoURL hook methods
	PhotoURLHook func(context.Context, boil.ContextExecutor, *PhotoURL) error

	photoURLQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	photoURLType                 = reflect.TypeOf(&PhotoURL{})
	photoURLMapping              = queries.MakeStructMapping(photoURLType)
	photoURLPrimaryKeyMapping, _ = queries.BindMapping(photoURLType, photoURLMapping, photoURLPrimaryKeyColumns)
	photoURLInsertCacheMut       sync.RWMutex
	photoURLInsertCache          = make(map[string]insertCache)
	photoURLUpdateCacheMut       sync.RWMutex
	photoURLUpdateCache          = make(map[string]updateCache)
	photoURLUpsertCacheMut       sync.RWMutex
	photoURLUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var photoURLAfterSelectMu sync.Mutex
var photoURLAfterSelectHooks []PhotoURLHook

var photoURLBeforeInsertMu sync.Mutex
var photoURLBeforeInsertHooks []PhotoURLHook
var photoURLAfterInsertMu sync.Mutex
var photoURLAfterInsertHooks []PhotoURLHook

var photoURLBeforeUpdateMu sync.Mutex
var photoURLBeforeUpdateHooks []PhotoURLHook
var photoURLAfterUpdateMu sync.Mutex
var photoURLAfterUpdateHooks []PhotoURLHook

var photoURLBeforeDeleteMu sync.Mutex
var photoURLBeforeDeleteHooks []PhotoURLHook
var photoURLAfterDeleteMu sync.Mutex
var photoURLAfterDeleteHooks []PhotoURLHook

var photoURLBeforeUpsertMu sync.Mutex
var photoURLBeforeUpsertHooks []PhotoURLHook
var photoURLAfterUpsertMu sync.Mutex
var photoURLAfterUpsertHooks []PhotoURLHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PhotoURL) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoURLAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PhotoURL) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoURLBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PhotoURL) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoURLAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PhotoURL) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoURLBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PhotoURL) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoURLAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PhotoURL) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoURLBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PhotoURL) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoURLAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PhotoURL) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoURLBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PhotoURL) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range photoURLAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPhotoURLHook registers your hook function for all future operations.
func AddPhotoURLHook(hookPoint boil.HookPoint, photoURLHook PhotoURLHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		photoURLAfterSelectMu.Lock()
		photoURLAfterSelectHooks = append(photoURLAfterSelectHooks, photoURLHook)
		photoURLAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		photoURLBeforeInsertMu.Lock()
		photoURLBeforeInsertHooks = append(photoURLBeforeInsertHooks, photoURLHook)
		photoURLBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		photoURLAfterInsertMu.Lock()
		photoURLAfterInsertHooks = append(photoURLAfterInsertHooks, photoURLHook)
		photoURLAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		photoURLBeforeUpdateMu.Lock()
		photoURLBeforeUpdateHooks = append(photoURLBeforeUpdateHooks, photoURLHook)
		photoURLBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		photoURLAfterUpdateMu.Lock()
		photoURLAfterUpdateHooks = append(photoURLAfterUpdateHooks, photoURLHook)
		photoURLAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		photoURLBeforeDeleteMu.Lock()
		photoURLBeforeDeleteHooks = append(photoURLBeforeDeleteHooks, photoURLHook)
		photoURLBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		photoURLAfterDeleteMu.Lock()
		photoURLAfterDeleteHooks = append(photoURLAfterDeleteHooks, photoURLHook)
		photoURLAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		photoURLBeforeUpsertMu.Lock()
		photoURLBeforeUpsertHooks = append(photoURLBeforeUpsertHooks, photoURLHook)
		photoURLBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		photoURLAfterUpsertMu.Lock()
		photoURLAfterUpsertHooks = append(photoURLAfterUpsertHooks, photoURLHook)
		photoURLAfterUpsertMu.Unlock()
	}
}

// One returns a single photoURL record from the query.
func (q photoURLQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PhotoURL, error) {
	o := &PhotoURL{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for photo_url")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PhotoURL records from the query.
func (q photoURLQuery) All(ctx context.Context, exec boil.ContextExecutor) (PhotoURLSlice, error) {
	var o []*PhotoURL

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to PhotoURL slice")
	}

	if len(photoURLAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PhotoURL records in the query.
func (q photoURLQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count photo_url rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q photoURLQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if photo_url exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *PhotoURL) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (photoURLL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePhotoURL interface{}, mods queries.Applicator) error {
	var slice []*PhotoURL
	var object *PhotoURL

	if singular {
		var ok bool
		object, ok = maybePhotoURL.(*PhotoURL)
		if !ok {
			object = new(PhotoURL)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePhotoURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePhotoURL))
			}
		}
	} else {
		s, ok := maybePhotoURL.(*[]*PhotoURL)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePhotoURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePhotoURL))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &photoURLR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &photoURLR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PhotoUrls = append(foreign.R.PhotoUrls, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PhotoUrls = append(foreign.R.PhotoUrls, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the photoURL to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PhotoUrls.
func (o *PhotoURL) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"photo_url\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, photoURLPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &photoURLR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			PhotoUrls: PhotoURLSlice{o},
		}
	} else {
		related.R.PhotoUrls = append(related.R.PhotoUrls, o)
	}

	return nil
}

// PhotoUrls retrieves all the records using an executor.
func PhotoUrls(mods ...qm.QueryMod) photoURLQuery {
	mods = append(mods, qm.From("\"photo_url\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"photo_url\".*"})
	}

	return photoURLQuery{q}
}

// FindPhotoURL retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPhotoURL(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PhotoURL, error) {
	photoURLObj := &PhotoURL{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"photo_url\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, photoURLObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from photo_url")
	}

	if err = photoURLObj.doAfterSelectHooks(ctx, exec); err != nil {
		return photoURLObj, err
	}

	return photoURLObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PhotoURL) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no photo_url provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(photoURLColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	photoURLInsertCacheMut.RLock()
	cache, cached := photoURLInsertCache[key]
	photoURLInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			photoURLAllColumns,
			photoURLColumnsWithDefault,
			photoURLColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, photoURLGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(photoURLType, photoURLMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(photoURLType, photoURLMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"photo_url\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"photo_url\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into photo_url")
	}

	if !cached {
		photoURLInsertCacheMut.Lock()
		photoURLInsertCache[key] = cache
		photoURLInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PhotoURL.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PhotoURL) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	photoURLUpdateCacheMut.RLock()
	cache, cached := photoURLUpdateCache[key]
	photoURLUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			photoURLAllColumns,
			photoURLPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, photoURLGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update photo_url, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"photo_url\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, photoURLPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(photoURLType, photoURLMapping, append(wl, photoURLPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update photo_url row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for photo_url")
	}

	if !cached {
		photoURLUpdateCacheMut.Lock()
		photoURLUpdateCache[key] = cache
		photoURLUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q photoURLQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for photo_url")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for photo_url")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PhotoURLSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"photo_url\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, photoURLPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in photoURL slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all photoURL")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PhotoURL) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no photo_url provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(photoURLColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	photoURLUpsertCacheMut.RLock()
	cache, cached := photoURLUpsertCache[key]
	photoURLUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			photoURLAllColumns,
			photoURLColumnsWithDefault,
			photoURLColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			photoURLAllColumns,
			photoURLPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, photoURLGeneratedColumns)
		update = strmangle.SetComplement(update, photoURLGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert photo_url, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(photoURLPrimaryKeyColumns))
			copy(conflict, photoURLPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"photo_url\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(photoURLType, photoURLMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(photoURLType, photoURLMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert photo_url")
	}

	if !cached {
		photoURLUpsertCacheMut.Lock()
		photoURLUpsertCache[key] = cache
		photoURLUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PhotoURL record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PhotoURL) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no PhotoURL provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), photoURLPrimaryKeyMapping)
	sql := "DELETE FROM \"photo_url\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from photo_url")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for photo_url")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q photoURLQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no photoURLQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from photo_url")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for photo_url")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PhotoURLSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(photoURLBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"photo_url\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, photoURLPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from photoURL slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for photo_url")
	}

	if len(photoURLAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PhotoURL) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPhotoURL(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PhotoURLSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PhotoURLSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), photoURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"photo_url\".* FROM \"photo_url\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, photoURLPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in PhotoURLSlice")
	}

	*o = slice

	return nil
}

// PhotoURLExists checks if the PhotoURL row exists.
func PhotoURLExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"photo_url\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if photo_url exists")
	}

	return exists, nil
}

// Exists checks if the PhotoURL row exists.
func (o *PhotoURL) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PhotoURLExists(ctx, exec, o.ID)
}
